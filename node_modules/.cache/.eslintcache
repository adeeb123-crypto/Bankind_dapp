[{"C:\\Users\\VAI-DEV-001\\Documents\\GitHub\\banking\\Bankind_dapp\\src\\index.js":"1","C:\\Users\\VAI-DEV-001\\Documents\\GitHub\\banking\\Bankind_dapp\\src\\reportWebVitals.js":"2","C:\\Users\\VAI-DEV-001\\Documents\\GitHub\\banking\\Bankind_dapp\\src\\App.js":"3","C:\\Users\\VAI-DEV-001\\Documents\\GitHub\\banking\\Bankind_dapp\\src\\components\\HomepageLayout.js":"4","C:\\Users\\VAI-DEV-001\\Documents\\GitHub\\banking\\Bankind_dapp\\src\\components\\Banks.js":"5","C:\\Users\\VAI-DEV-001\\Documents\\GitHub\\banking\\Bankind_dapp\\src\\components\\BankReserve.js":"6","C:\\Users\\VAI-DEV-001\\Documents\\GitHub\\banking\\Bankind_dapp\\src\\components\\Branch.js":"7","C:\\Users\\VAI-DEV-001\\Documents\\GitHub\\banking\\Bankind_dapp\\src\\components\\Banking.js":"8","C:\\Users\\VAI-DEV-001\\Documents\\GitHub\\banking\\Bankind_dapp\\src\\constants.js":"9"},{"size":596,"mtime":1678260034606,"results":"10","hashOfConfig":"11"},{"size":375,"mtime":1678260034613,"results":"12","hashOfConfig":"11"},{"size":2364,"mtime":1678260034531,"results":"13","hashOfConfig":"11"},{"size":15095,"mtime":1678260034562,"results":"14","hashOfConfig":"11"},{"size":7323,"mtime":1678260034535,"results":"15","hashOfConfig":"11"},{"size":7384,"mtime":1678260034533,"results":"16","hashOfConfig":"11"},{"size":44049,"mtime":1678260034537,"results":"17","hashOfConfig":"11"},{"size":33467,"mtime":1678260034534,"results":"18","hashOfConfig":"11"},{"size":30155,"mtime":1678260034599,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1z011yw",{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":54,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":38,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\VAI-DEV-001\\Documents\\GitHub\\banking\\Bankind_dapp\\src\\index.js",[],[],"C:\\Users\\VAI-DEV-001\\Documents\\GitHub\\banking\\Bankind_dapp\\src\\reportWebVitals.js",[],[],"C:\\Users\\VAI-DEV-001\\Documents\\GitHub\\banking\\Bankind_dapp\\src\\App.js",["53","54"],[],"//import logo from './logo.svg';\r\nimport './App.css';\r\n// import Client from \"./components/Client\";\r\n// import Navbar from './components/Navbar';\r\n\r\n// import { useState } from \"react\";\r\n// import { Dropdown, Input } from 'semantic-ui-react'\r\nimport HomepageLayout from \"./components/HomepageLayout\";\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport Banks from \"./components/Banks\";\r\nimport Branch  from \"./components/Branch\";\r\nimport { BrowserRouter, Route, Routes } from \"react-router-dom\";\r\n// import ReserveHeader from \"./components/ReserveHeader\";\r\nimport BankReserve from \"./components/BankReserve\";\r\nimport Banking from './components/Banking';\r\nimport './App.css';\r\nconst ethers = require('ethers');\r\nvar Web3 = require('web3');\r\n\r\n\r\n\r\n      \r\n    \r\n\r\nfunction App() {\r\n\r\n \r\n  return (\r\n    // <div className=\"App\">\r\n    //   <Navbar/>\r\n\r\n    //    <h1>Banking Services</h1>\r\n       \r\n    //    <h3 > Wallet Address : {walletAddress}</h3>\r\n    //    <div>\r\n    //    <div>\r\n\r\n       <div className=\"App\">\r\n       \r\n       <BrowserRouter>\r\n       <Routes>\r\n       <Route path = '/' element ={<HomepageLayout />}/>\r\n         <Route path = '/banks' element ={<Banks />}/>\r\n         <Route path = '/branch' element ={<Branch />}/>\r\n         <Route path = '/bankreserve' element ={<BankReserve />}/>\r\n         <Route path = '/banking' element ={<Banking />}/>\r\n       </Routes>\r\n       </BrowserRouter>\r\n   \r\n     </div>\r\n        \r\n      \r\n/* <Input\r\n    label={<Dropdown defaultValue='.eth' options={options} />}\r\n    labelPosition='right'\r\n    placeholder='Find domain'\r\n    onChange ={(e)=>setName(e.target.value)}\r\n      value= {userName}\r\n  />\r\n\r\n\r\n      </div>\r\n      <div>\r\n     \r\n\r\n<Input  onChange ={(e)=>setAddress(e.target.value)}\r\n      value= {userAddress}  placeholder='0xBc34F...' />\r\n\r\n      </div>\r\n      <div>\r\n     \r\n<button class=\"ui secondary button\">Register</button>\r\n\r\n      </div>\r\n      </div>\r\n\r\n\r\n      <div  className='margin'>\r\n      <div>\r\n     \r\n      <Input  onChange ={(e)=>setEnsName(e.target.value)}\r\n      value= {ensName}  placeholder='0xBc34F...' />\r\n      \r\n     </div>\r\n      <div>\r\n     <button class=\"ui secondary button\"  onClick={resolve()}>Resolve</button>\r\n     </div>\r\n      <div>\r\n        <h4> Your ENS Address:{userEns}</h4>\r\n      </div>\r\n      </div>\r\n      \r\n    </div> */\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\VAI-DEV-001\\Documents\\GitHub\\banking\\Bankind_dapp\\src\\components\\HomepageLayout.js",["55","56"],[],"/* eslint-disable max-classes-per-file */\r\n/* eslint-disable react/no-multi-comp */\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport { createMedia } from '@artsy/fresnel'\r\nimport PropTypes from 'prop-types'\r\nimport React, { Component } from 'react'\r\nimport { InView } from 'react-intersection-observer'\r\nimport { Link } from 'react-router-dom'\r\nimport Banks from './Banks'\r\n\r\nimport { useNavigate } from 'react-router-dom';\r\nimport {\r\n    Button,\r\n    Container,\r\n    Divider,\r\n    Grid,\r\n    Header,\r\n    Icon,\r\n    Image,\r\n    List,\r\n    Menu,\r\n    Segment,\r\n    Sidebar,\r\n} from 'semantic-ui-react'\r\n\r\n\r\nconst { MediaContextProvider, Media } = createMedia({\r\n    breakpoints: {\r\n        mobile: 0,\r\n        tablet: 768,\r\n        computer: 1024,\r\n    },\r\n})\r\n\r\n\r\nconst HomepageHeading = ({ mobile }) => (\r\n    <Container text>\r\n        <Header\r\n            as='h1'\r\n            content='Your -Decentralized Banking System'\r\n            inverted\r\n            style={{\r\n                fontSize: mobile ? '2em' : '4em',\r\n                fontWeight: 'normal',\r\n                marginBottom: 0,\r\n                marginTop: mobile ? '1.5em' : '3em',\r\n            }}\r\n        />\r\n        <Header\r\n            as='h2'\r\n            content='Trusted and Secure Banking Services.'\r\n            inverted\r\n            style={{\r\n                fontSize: mobile ? '1.5em' : '1.7em',\r\n                fontWeight: 'normal',\r\n                marginTop: mobile ? '0.5em' : '1.5em',\r\n            }}\r\n        />\r\n        <Button primary size='huge'>\r\n            Welcome\r\n            <Icon name='right arrow' />\r\n        </Button>\r\n    </Container>\r\n)\r\n\r\nHomepageHeading.propTypes = {\r\n    mobile: PropTypes.bool,\r\n}\r\n\r\n\r\n// class MyComponent extends React.Component {\r\n//    constructor(props) {\r\n//      super(props);\r\n//      this.state = { shouldRender: false };\r\n//    }\r\n\r\n//    componentDidMount() {\r\n//      // set the state to true after the component has mounted\r\n//      this.setState({ shouldRender: true });\r\n//    }\r\n\r\n//    render() {\r\n//      // only render the component if shouldRender is true\r\n//      if (!this.state.shouldRender) {\r\n//        return null;\r\n//      }\r\n//      return (\r\n//        // component's output goes here\r\n//      );\r\n//    }\r\n//  }\r\n\r\n\r\n\r\n\r\nclass DesktopContainer extends Component {\r\n\r\n    constructor() {\r\n        super()\r\n    }\r\n    state = {}\r\n\r\n    toggleFixedMenu = (inView) => this.setState({ fixed: !inView });\r\n\r\n    render() {\r\n        const { children } = this.props\r\n        const { fixed } = this.state\r\n        return (\r\n            <Media greaterThan='mobile'>\r\n                <InView onChange={this.toggleFixedMenu}>\r\n                    <Segment\r\n                        inverted\r\n                        textAlign='center'\r\n                        style={{ minHeight: 700, padding: '1em 0em' }}\r\n                        vertical\r\n                    >\r\n                        <Menu\r\n                            fixed={fixed ? 'top' : null}\r\n                            inverted={!fixed}\r\n                            pointing={!fixed}\r\n                            secondary={!fixed}\r\n                            size='large'\r\n                        >\r\n                            <Container>\r\n\r\n                                <Menu.Item as={Link} to='/bankreserve'>Reserve Bank</Menu.Item>\r\n                                <Menu.Item as={Link} to='/banks'>Bank</Menu.Item>\r\n                                <Menu.Item as={Link} to='/branch'>Branch</Menu.Item>\r\n                                <Menu.Item as={Link} to='/banking'>Banking Services</Menu.Item>\r\n                                <Menu.Item position='right'>\r\n\r\n                                    <Button as='a' inverted={!fixed} primary={fixed} style={{ marginLeft: '0.5em' }} onClick={async function requestAccount() {\r\n\r\n                                        console.log('Requesting account...');\r\n                                        if (window.ethereum) {\r\n                                            console.log('detected');\r\n                                            try {\r\n                                                const accounts = await window.ethereum.request({\r\n                                                    method: \"eth_requestAccounts\"\r\n                                                });\r\n                                                console.log(accounts[0]);\r\n\r\n                                            }\r\n                                            catch (error) {\r\n                                                console.log('Error connecting...');\r\n                                            }\r\n                                        }\r\n                                        else {\r\n                                            console.log('Meta Mask not detected');\r\n                                        }\r\n                                    }}>\r\n                                        Connect Wallet\r\n                                    </Button>\r\n                                </Menu.Item>\r\n\r\n                            </Container>\r\n                        </Menu>\r\n                        <HomepageHeading />\r\n                    </Segment>\r\n                </InView>\r\n\r\n                {children}\r\n            </Media>\r\n        )\r\n    }\r\n}\r\n\r\nDesktopContainer.propTypes = {\r\n    children: PropTypes.node,\r\n}\r\n\r\n\r\n\r\nclass MobileContainer extends Component {\r\n    state = {}\r\n\r\n    handleSidebarHide = () => this.setState({ sidebarOpened: false })\r\n\r\n    handleToggle = () => this.setState({ sidebarOpened: true })\r\n\r\n    render() {\r\n        const { children } = this.props\r\n        const { sidebarOpened } = this.state\r\n\r\n        return (\r\n            <Media as={Sidebar.Pushable} at='mobile'>\r\n                <Sidebar.Pushable>\r\n                    <Sidebar\r\n                        as={Menu}\r\n                        animation='overlay'\r\n                        inverted\r\n                        onHide={this.handleSidebarHide}\r\n                        vertical\r\n                        visible={sidebarOpened}\r\n                    >\r\n                        <Menu.Item as='a' active>\r\n                            Reserve Bank\r\n                        </Menu.Item>\r\n\r\n                        <Menu.Item as='a'>Bank</Menu.Item>\r\n                        <Menu.Item as='a'>Branch</Menu.Item>\r\n                        <Menu.Item as='a'>Banking Services</Menu.Item>\r\n                        <Menu.Item as='a'>Connect</Menu.Item>\r\n                        {/* <Menu.Item as='a'>Wallet</Menu.Item> */}\r\n                    </Sidebar>\r\n\r\n                    <Sidebar.Pusher dimmed={sidebarOpened}>\r\n                        <Segment\r\n                            inverted\r\n                            textAlign='center'\r\n                            style={{ minHeight: 350, padding: '1em 0em' }}\r\n                            vertical\r\n                        >\r\n                            <Container>\r\n                                <Menu inverted pointing secondary size='large'>\r\n                                    <Menu.Item onClick={this.handleToggle}>\r\n                                        <Icon name='sidebar' />\r\n                                    </Menu.Item>\r\n                                    <Menu.Item position='right'>\r\n                                        <Button as='a' inverted>\r\n                                            Connect\r\n                                        </Button>\r\n                                        <Button as='a' inverted style={{ marginLeft: '0.5em' }}>\r\n                                            Connect\r\n                                        </Button>\r\n                                    </Menu.Item>\r\n                                </Menu>\r\n                            </Container>\r\n                            <HomepageHeading mobile />\r\n                        </Segment>\r\n\r\n                        {children}\r\n                    </Sidebar.Pusher>\r\n                </Sidebar.Pushable>\r\n            </Media>\r\n        )\r\n    }\r\n}\r\n\r\nMobileContainer.propTypes = {\r\n    children: PropTypes.node,\r\n}\r\n\r\nconst ResponsiveContainer = ({ children }) => (\r\n    /* Heads up!\r\n     * For large applications it may not be best option to put all page into these containers at\r\n     * they will be rendered twice for SSR.\r\n     */\r\n    <MediaContextProvider>\r\n        <DesktopContainer>{children}</DesktopContainer>\r\n        <MobileContainer>{children}</MobileContainer>\r\n    </MediaContextProvider>\r\n)\r\n\r\nResponsiveContainer.propTypes = {\r\n    children: PropTypes.node,\r\n}\r\n\r\nconst HomepageLayout = () => (\r\n    <ResponsiveContainer>\r\n        <Segment style={{ padding: '8em 0em' }} vertical>\r\n            <Grid container stackable verticalAlign='middle'>\r\n                <Grid.Row>\r\n                    <Grid.Column width={8}>\r\n                        <Header as='h3' style={{ fontSize: '2em' }}>\r\n                            We Help customers and Investors\r\n                        </Header>\r\n                        <p style={{ fontSize: '1.33em' }}>\r\n                            We can give your company superpowers to do things that they never thought possible.\r\n                            Let us delight your customers and empower your needs... through Blockchain Technology.\r\n                        </p>\r\n                        <Header as='h3' style={{ fontSize: '2em' }}>\r\n                            We Make Bananas That Can Dance\r\n                        </Header>\r\n                        <p style={{ fontSize: '1.33em' }}>\r\n                            Yes that's right, you thought it was the stuff of dreams, but even bananas can be\r\n                            bioengineered.\r\n                        </p>\r\n                    </Grid.Column>\r\n                    <Grid.Column floated='right' width={6}>\r\n                        <Image bordered rounded size='large' src='/images/wireframe/white-image.png' />\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n                <Grid.Row>\r\n                    <Grid.Column textAlign='center'>\r\n                        <Button size='huge'>Check Them Out</Button>\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n            </Grid>\r\n        </Segment>\r\n\r\n        <Segment style={{ padding: '0em' }} vertical>\r\n            <Grid celled='internally' columns='equal' stackable>\r\n                <Grid.Row textAlign='center'>\r\n                    <Grid.Column style={{ paddingBottom: '5em', paddingTop: '5em' }}>\r\n                        <Header as='h3' style={{ fontSize: '2em' }}>\r\n                            \"What a Company\"\r\n                        </Header>\r\n                        <p style={{ fontSize: '1.33em' }}>That is what they all say about us</p>\r\n                    </Grid.Column>\r\n                    <Grid.Column style={{ paddingBottom: '5em', paddingTop: '5em' }}>\r\n                        <Header as='h3' style={{ fontSize: '2em' }}>\r\n                            \"I shouldn't have gone with their competitor.\"\r\n                        </Header>\r\n                        <p style={{ fontSize: '1.33em' }}>\r\n                            <Image avatar src='/images/avatar/large/nan.jpg' />\r\n                            <b>Nan</b> Chief Fun Officer Acme Toys\r\n                        </p>\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n            </Grid>\r\n        </Segment>\r\n\r\n        <Segment style={{ padding: '8em 0em' }} vertical>\r\n            <Container text>\r\n                <Header as='h3' style={{ fontSize: '2em' }}>\r\n                    Breaking The Grid, Grabs Your Attention\r\n                </Header>\r\n                <p style={{ fontSize: '1.33em' }}>\r\n                    Instead of focusing on content creation and hard work, we have learned how to master the\r\n                    art of doing nothing by providing massive amounts of whitespace and generic content that\r\n                    can seem massive, monolithic and worth your attention.\r\n                </p>\r\n                <Button as='a' size='large'>\r\n                    Read More\r\n                </Button>\r\n\r\n                <Divider\r\n                    as='h4'\r\n                    className='header'\r\n                    horizontal\r\n                    style={{ margin: '3em 0em', textTransform: 'uppercase' }}\r\n                >\r\n                    <a href='#'>Case Studies</a>\r\n                </Divider>\r\n\r\n                <Header as='h3' style={{ fontSize: '2em' }}>\r\n                    Did We Tell You About Our Bananas?\r\n                </Header>\r\n                <p style={{ fontSize: '1.33em' }}>\r\n                    Yes I know you probably disregarded the earlier boasts as non-sequitur filler content, but\r\n                    it's really true. It took years of gene splicing and combinatory DNA research, but our\r\n                    bananas can really dance.\r\n                </p>\r\n                <Button as='a' size='large'>\r\n                    I'm Still Quite Interested\r\n                </Button>\r\n            </Container>\r\n        </Segment>\r\n\r\n        <Segment inverted vertical style={{ padding: '5em 0em' }}>\r\n            <Container>\r\n                <Grid divided inverted stackable>\r\n                    <Grid.Row>\r\n                        <Grid.Column width={3}>\r\n                            <Header inverted as='h4' content='About' />\r\n                            <List link inverted>\r\n                                <List.Item as='a'>Sitemap</List.Item>\r\n                                <List.Item as='a'>Contact Us</List.Item>\r\n                                <List.Item as='a'>Religious Ceremonies</List.Item>\r\n                                <List.Item as='a'>Gazebo Plans</List.Item>\r\n                            </List>\r\n                        </Grid.Column>\r\n                        <Grid.Column width={3}>\r\n                            <Header inverted as='h4' content='Services' />\r\n                            <List link inverted>\r\n                                <List.Item as='a'>Banana Pre-Order</List.Item>\r\n                                <List.Item as='a'>DNA FAQ</List.Item>\r\n                                <List.Item as='a'>How To Access</List.Item>\r\n                                <List.Item as='a'>Favorite X-Men</List.Item>\r\n                            </List>\r\n                        </Grid.Column>\r\n                        <Grid.Column width={7}>\r\n                            <Header as='h4' inverted>\r\n                                Footer Header\r\n                            </Header>\r\n                            <p>\r\n                                Extra space for a call to action inside the footer that could help re-engage users.\r\n                            </p>\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                </Grid>\r\n            </Container>\r\n        </Segment>\r\n    </ResponsiveContainer>\r\n)\r\n\r\nexport function WithRouter(props) {\r\n    const navigate = useNavigate();\r\n    return (<Banks navigate={navigate}></Banks>);\r\n};\r\n\r\nexport default HomepageLayout","C:\\Users\\VAI-DEV-001\\Documents\\GitHub\\banking\\Bankind_dapp\\src\\components\\Banks.js",["57","58","59","60","61","62","63"],[],"/* This to be fixed in addbranch banks.call needs to be changed */\r\n\r\nimport React from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { Button, Form } from \"semantic-ui-react\";\r\nimport { Header, Icon, Image, Segment, Divider, Table, Breadcrumb } from \"semantic-ui-react\";\r\nimport { contractAddressFed, ABIFed } from \"../constants\";\r\nimport { contractAddressEcb, ABIEcb } from \"../constants\";\r\nimport { contractAddressbnksys, ABIbnksys } from \"../constants\";\r\nconst colors = [\r\n  'black'\r\n]\r\n\r\nfunction Banks() {\r\n\r\n  const Web3 = require(\"web3\");\r\n  const ethers = require(\"ethers\");\r\n\r\n  const [bankid, setBankID] = useState(\"\");\r\n  const [branchaddress, setBranchAddress] = useState(\"\");\r\n  const [amount, setAmount] = useState(\"\");\r\n  const [tokenSymbol, setTokenSymbol] = useState(\"\");\r\n  const [centralbankid, setCentralBankID] = useState(\"\");\r\n  const [bankAdded, setBankAdded] = useState(false);\r\n  const [arrayData, setArrayData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (bankAdded) { setBankAdded(true) }\r\n    else { setBankAdded(false) }\r\n\r\n\r\n    let temp_data = window.localStorage.getItem(\"DataB\")\r\n    if (temp_data) {\r\n      temp_data = JSON.parse(temp_data)\r\n      setArrayData(temp_data)\r\n    }\r\n\r\n    window.localStorage.clear()\r\n\r\n  }, [arrayData]\r\n  );\r\n  async function addbranch() {\r\n    try {\r\n      if (\r\n        typeof window !== \"undefined\" &&\r\n        typeof window.ethereum !== \"undefined\"\r\n      ) {\r\n        const accounts = await window.ethereum.enable();\r\n        console.log(\"accounts\", accounts);\r\n        const provider = await new ethers.providers.Web3Provider(\r\n          window.ethereum\r\n        );\r\n        const signer = await provider.getSigner();\r\n        console.log(\"Signer\", signer);\r\n        const address = await signer.getAddress();\r\n        console.log(address);\r\n      } else {\r\n        console.log(\"MemtaMask Not Installed Maen\");\r\n      }\r\n      const web3eth = new Web3(Web3.givenProvider);\r\n\r\n      const callContract = new web3eth.eth.Contract(\r\n        ABIbnksys,\r\n        contractAddressbnksys\r\n      );\r\n      const callContractECB = new web3eth.eth.Contract(ABIEcb, contractAddressEcb);\r\n      const callContractFED = new web3eth.eth.Contract(ABIFed, contractAddressFed);\r\n      if (web3eth.givenProvider) {\r\n        console.log(\"Hello Provider Here\", web3eth.givenProvider);\r\n        let address = web3eth.givenProvider.selectedAddress;\r\n        console.log(\"address\", address);\r\n\r\n        if (bankid == 0) {\r\n          setTokenSymbol(\"EUR\")\r\n          let responseEcb = await callContractECB.methods.approve(contractAddressbnksys, amount * 100000000).send({ from: address, gas: 1000000 });\r\n          let response = await callContract.methods\r\n            .addBranch(bankid, branchaddress, amount * 100000000, tokenSymbol)\r\n            .send({ from: address, gas: 1000000 })\r\n          console.log(\"Response from addbank:\", response)\r\n\r\n          let branchCount1 = await callContract.methods\r\n            .branchCount(0)\r\n            .call();\r\n\r\n          let branchdetails1 = await callContract.methods\r\n            .branches(0, branchCount1 - 1)\r\n            .call();\r\n\r\n          console.log(\"Response from addbank:\", branchCount1)\r\n          console.log(\"call bank:\", branchdetails1)\r\n\r\n\r\n          let tmp_data = arrayData;\r\n          tmp_data.push(branchdetails1)\r\n          console.log(tmp_data)\r\n          setArrayData(tmp_data)\r\n          window.localStorage.setItem(\"DataB\", JSON.stringify(tmp_data))\r\n          console.log(\"arrayData:\", arrayData);\r\n          console.log(\"arrayData:\", arrayData[0].amount);\r\n          console.log(\"arrayData:\", arrayData[0].bank);\r\n        }\r\n        else {\r\n\r\n          setTokenSymbol(\"USD\")\r\n          let responseFed = await callContractFED.methods\r\n            .approve(contractAddressbnksys, amount * 100000000)\r\n            .send({ from: address, gas: 1000000 });\r\n          console.log(\"Response :\", responseFed);\r\n          let response = await callContract.methods\r\n            .addBranch(bankid, branchaddress, amount * 100000000, tokenSymbol)\r\n            .send({ from: address, gas: 1000000 })\r\n          console.log(response)\r\n\r\n          let branchCount2 = await callContract.methods\r\n            .branchCount(1)\r\n            .call();\r\n\r\n          let branchdetails2 = await callContract.methods\r\n            .branches(1, branchCount2 - 1)\r\n            .call();\r\n\r\n\r\n          console.log(\"Response from addbank:\", branchCount2)\r\n          console.log(\"call bank:\", branchdetails2)\r\n\r\n\r\n          let tmp_data = arrayData;\r\n          tmp_data.push(branchdetails2)\r\n          console.log(tmp_data)\r\n          setArrayData(tmp_data)\r\n          window.localStorage.setItem(\"DataB\", JSON.stringify(tmp_data))\r\n          console.log(\"arrayData:\", arrayData);\r\n          // console.log(\"arrayData:\", arrayData[0].amount);\r\n          // console.log(\"arrayData:\", arrayData[0].bank);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(Error);\r\n    }\r\n\r\n  }\r\n\r\n  return (\r\n    <div>\r\n\r\n      <div>\r\n        <Header as=\"h2\" icon textAlign=\"center\">\r\n          <Icon name=\"building outline\" circular />\r\n          <Header.Content> Bank</Header.Content>\r\n        </Header>\r\n        <Image\r\n          centered\r\n          size=\"large\"\r\n          src=\"https://react.semantic-ui.com/images/wireframe/centered-paragraph.png\"\r\n        />\r\n\r\n      </div>\r\n\r\n      <Form unstackable>\r\n        <Form.Group widths={2}>\r\n          <Form.Input label=\"Branch Address\" placeholder=\"0xfsc257d...\" type=\"text\"\r\n            value={branchaddress}\r\n            onChange={(e) => setBranchAddress(e.target.value)} />\r\n          <Form.Input label=\"Amount\" placeholder=\"1000...\" type=\"text\"\r\n            value={amount}\r\n            onChange={(e) => setAmount(e.target.value)} />\r\n          <Form.Input label=\"Bank ID\" placeholder=\"0\" type=\"text\"\r\n            value={bankid}\r\n            onChange={(e) => setBankID(e.target.value)} />\r\n\r\n        </Form.Group>\r\n\r\n        <Button type=\"submit\" onClick={addbranch}>Submit</Button>\r\n      </Form>\r\n      <Divider/>\r\n      <div>\r\n\r\n        <Table color='black' key={colors} inverted>\r\n          <Table.Header>\r\n            <Table.Row>\r\n              <Table.HeaderCell>Branch Address</Table.HeaderCell>\r\n              <Table.HeaderCell>Amount</Table.HeaderCell>\r\n              <Table.HeaderCell>Approved</Table.HeaderCell>\r\n            </Table.Row>\r\n          </Table.Header>\r\n\r\n          <Table.Body>\r\n            {\r\n              (arrayData.length > 0) &&\r\n              arrayData.map((data, index) => {\r\n                console.log(data[index]);\r\n                return (\r\n                  <Table.Row key={index}>\r\n                    <Table.Cell>{data.branch}</Table.Cell>\r\n                    <Table.Cell>{data.amount / 10e7} {data.tokenSymbol}</Table.Cell>\r\n                    <Table.Cell>{data.status ? 'True' : 'True'}</Table.Cell>\r\n                  </Table.Row>\r\n                )\r\n              }\r\n              )}\r\n\r\n          </Table.Body>\r\n        </Table>\r\n\r\n      </div>\r\n\r\n\r\n\r\n      <div>\r\n        {/* <Segment inverted>\r\n    <Image src='https://react.semantic-ui.com/images/wireframe/short-paragraph.png' />\r\n    <Divider inverted />\r\n\r\n  </Segment> */}\r\n      </div>\r\n    </div>\r\n\r\n  );\r\n}\r\nexport default Banks;\r\n","C:\\Users\\VAI-DEV-001\\Documents\\GitHub\\banking\\Bankind_dapp\\src\\components\\BankReserve.js",["64","65","66","67","68","69","70"],[],"import React, { useEffect } from \"react\";\r\nimport { Button, Form, Header, Icon, Image } from \"semantic-ui-react\";\r\nimport { useState, use } from \"react\";\r\nimport { contractAddressFed, ABIFed } from \"../constants\";\r\nimport { contractAddressEcb, ABIEcb } from \"../constants\";\r\nimport { contractAddressbnksys, ABIbnksys } from \"../constants\";\r\nimport { Table } from 'semantic-ui-react'\r\n\r\nconst colors = [\r\n  'black'\r\n]\r\n\r\nconst Web3 = require(\"web3\");\r\nconst ethers = require(\"ethers\");\r\n\r\nfunction BankReserve() {\r\n  const [bankaddress, setBankAddress] = useState(\"\");\r\n  const [tokenSymbol, setTokenSymbol] = useState(\"\");\r\n  const [centralbankid, setCentralBankID] = useState(\"\");\r\n  const [amount, setAmount] = useState(\"\");\r\n  const [arrayData, setArrayData] = useState([]);\r\n  const [bankAdded, setBankAdded] = useState(false);\r\n  const [temp, setTemp] = useState(\"\")\r\n\r\n  useEffect(() => {\r\n\r\n    let temp_data = window.localStorage.getItem(\"Data\")\r\n    if (temp_data) {\r\n      temp_data = JSON.parse(temp_data)\r\n      setArrayData(temp_data)\r\n    }\r\n    // window.localStorage.clear();\r\n\r\n  }, [arrayData]\r\n  );\r\n\r\n  async function addbank() {\r\n    try {\r\n      if (\r\n        typeof window !== \"undefined\" &&\r\n        typeof window.ethereum !== \"undefined\"\r\n      ) {\r\n        const accounts = await window.ethereum.enable();\r\n        console.log(\"accounts\", accounts);\r\n        const provider = await new ethers.providers.Web3Provider(\r\n          window.ethereum\r\n        );\r\n        const signer = await provider.getSigner();\r\n        console.log(\"Signer\", signer);\r\n        const address = await signer.getAddress();\r\n        console.log(address);\r\n      } else {\r\n        console.log(\"MemtaMask Not Installed Maen\");\r\n      }\r\n      const web3eth = new Web3(Web3.givenProvider);\r\n\r\n      const callContract = new web3eth.eth.Contract(\r\n        ABIbnksys,\r\n        contractAddressbnksys\r\n      );\r\n      const callContractECB = new web3eth.eth.Contract(ABIEcb, contractAddressEcb);\r\n      const callContractFED = new web3eth.eth.Contract(ABIFed, contractAddressFed);\r\n      if (web3eth.givenProvider) {\r\n        console.log(\"Hello Provider Here\", web3eth.givenProvider);\r\n        let address = web3eth.givenProvider.selectedAddress;\r\n        console.log(\"address\", address);\r\n\r\n        if (centralbankid == 0) {\r\n          setTokenSymbol(\"EUR\")\r\n          let responseEcb = await callContractECB.methods.approve(contractAddressbnksys, amount * 100000000).send({ from: address, gas: 1000000 });\r\n          let response = await callContract.methods\r\n            .addBank(bankaddress, tokenSymbol, centralbankid, amount * 100000000)\r\n            .send({ from: address, gas: 1000000 });\r\n\r\n          let responseP1 = await callContract.methods\r\n            .banks(0)\r\n            .call();\r\n          console.log(\"Response from addbank:\", response)\r\n          console.log(\"call bank:\", responseP1)\r\n\r\n          let tmp_data = arrayData;\r\n          tmp_data.push(responseP1)\r\n          console.log(tmp_data)\r\n          setArrayData(tmp_data)\r\n          window.localStorage.setItem(\"Data\", JSON.stringify(tmp_data))\r\n          console.log(\"arrayData:\", arrayData);\r\n          console.log(\"arrayData:\", arrayData[0].amount);\r\n          console.log(\"arrayData:\", arrayData[0].bank);\r\n          // setArrayData([])\r\n          // if (response) {\r\n          //   setArrayData(tmp_data)\r\n          //   setAddBankStatus(true)\r\n          // } console.log(\"tmp_data\", tmp_data)\r\n        }\r\n        else {\r\n          setTokenSymbol(\"USD\")\r\n          let responseFed = await callContractFED.methods\r\n            .approve(contractAddressbnksys, amount * 10e8)\r\n            .send({ from: address, gas: 1000000 });\r\n          console.log(\"Response :\", responseFed);\r\n          let response = await callContract.methods\r\n            .addBank(bankaddress, tokenSymbol, centralbankid, amount * 10e8)\r\n            .send({ from: address, gas: 1000000 })\r\n          let responseP2 = await callContract.methods\r\n            .banks(1)\r\n            .call();\r\n\r\n          console.log(responseFed)\r\n          console.log(response)\r\n\r\n          // response = {addres: hhkujiiio, status: true, id:555, amount:8885454}\r\n          let tmp_data = arrayData;\r\n          tmp_data.push(responseP2)\r\n          console.log(\"tmp_data\", tmp_data)\r\n          setArrayData(tmp_data)\r\n          window.localStorage.setItem(\"Data\", JSON.stringify(tmp_data))\r\n          console.log(\"arrayData:\", arrayData[0].amount)\r\n          console.log(\"arrayData:\", arrayData[0].bank)\r\n\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(Error);\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <Header as=\"h2\" icon textAlign=\"center\">\r\n          <Icon name=\"money\" circular />\r\n          <Header.Content>  World Token Reserve</Header.Content>\r\n        </Header>\r\n        <Image\r\n          centered\r\n          size=\"large\"\r\n          src=\"https://react.semantic-ui.com/images/wireframe/centered-paragraph.png\"\r\n        />\r\n      </div>\r\n      <Form unstackable>\r\n        <Form.Group widths={2}>\r\n          <Form.Input label=\"Bank Adress\" placeholder=\"0xfsc257d...\" type=\"text\"\r\n            value={bankaddress}\r\n            onChange={(e) => setBankAddress(e.target.value)} />\r\n          <Form.Input label=\"Amount\" placeholder=\"10\" type=\"text\"\r\n            value={amount}\r\n            onChange={(e) => setAmount(e.target.value)} />\r\n          <Form.Input label=\"Central Bank ID\" placeholder=\"0\" type=\"text\"\r\n            value={centralbankid}\r\n            onChange={(e) => setCentralBankID(e.target.value)} />\r\n        </Form.Group>\r\n\r\n        {/* {centralbankid ? <Button type=\"submit\" onClick={addbank()}>Submit</Button> :<div>Ereor</div> } */}\r\n        <Button type=\"submit\" onClick={addbank}>Submit</Button>\r\n      </Form>\r\n\r\n\r\n      <div>\r\n\r\n        <Table color='black' key={colors} inverted>\r\n          <Table.Header>\r\n            <Table.Row>\r\n              <Table.HeaderCell>Bank Address</Table.HeaderCell>\r\n              <Table.HeaderCell>Amount</Table.HeaderCell>\r\n              <Table.HeaderCell>Approved</Table.HeaderCell>\r\n            </Table.Row>\r\n          </Table.Header>\r\n\r\n          <Table.Body>\r\n            {\r\n\r\n              (arrayData.length > 0) &&\r\n              arrayData.map((data, index) => {\r\n                return (\r\n                  <Table.Row key={index}>\r\n                    <Table.Cell>{data.bank}</Table.Cell>\r\n                    <Table.Cell>{data.amount / 10e7} {data.tokenSymbol}</Table.Cell>\r\n                    <Table.Cell>{data.status ?  <Icon color='green' name='checkmark' size='large' /> : 'True'}</Table.Cell>\r\n                  </Table.Row>\r\n                )\r\n              }\r\n              )}\r\n          </Table.Body>\r\n        </Table>\r\n\r\n      </div>\r\n    </div>\r\n\r\n\r\n  );\r\n}\r\nexport default BankReserve;\r\n\r\n\r\n\r\n// <Table.Body>\r\n//           {\r\n//             (arrayData.length >0) && (\r\n//               arrayData.map((data , index) => {\r\n//                 <Table.Row key={index}>\r\n//                 <Table.Cell>{data.address}</Table.Cell>\r\n//                 <Table.Cell>{data.amount}</Table.Cell>\r\n//                 <Table.Cell>Yes</Table.Cell>\r\n//               </Table.Row>\r\n//               })\r\n//           }\r\n\r\n// <Table.Row>\r\n// <Table.Cell>Orange</Table.Cell>\r\n// <Table.Cell>310</Table.Cell>\r\n// <Table.Cell>Yes</Table.Cell>\r\n// </Table.Row>\r\n","C:\\Users\\VAI-DEV-001\\Documents\\GitHub\\banking\\Bankind_dapp\\src\\components\\Branch.js",["71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124"],[],"import React from \"react\";\r\nimport { Button, Form } from \"semantic-ui-react\";\r\nimport { useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport {\r\n  Header,\r\n  Icon,\r\n  Image,\r\n  Segment,\r\n  Divider,\r\n  Table,\r\n  Breadcrumb,\r\n} from \"semantic-ui-react\";\r\nimport { contractAddressFed, ABIFed } from \"../constants\";\r\nimport { contractAddressEcb, ABIEcb } from \"../constants\";\r\nimport { contractAddressbnksys, ABIbnksys } from \"../constants\";\r\nimport { Card } from \"semantic-ui-react\";\r\n\r\nconst colors = [\"black\"];\r\n\r\nconst Web3 = require(\"web3\");\r\nconst ethers = require(\"ethers\");\r\n\r\nfunction Branch() {\r\n  const [bankid, setBankID] = useState(\"\");\r\n  const [branchid, setBranchID] = useState(\"\");\r\n  const [amount, setAmount] = useState(\"\");\r\n  const [tokenSymbol, setTokenSymbol] = useState(\"\");\r\n  const [clientaddress, setClientAddress] = useState(\"\");\r\n  const [centralbankid, setCentralBankID] = useState(\"\");\r\n  const [arrayData, setArrayData] = useState([]);\r\n  const [arrayDataForexDet, setArrayDataForexDet] = useState([]);\r\n  const [arrayDataBorrowDet, setArrayBorrowDet] = useState([]);\r\n  const [arrayDataBorrowDispDet, setArrayBorrowDispDet] = useState([]);\r\n  const [newarrayData, setNewArrayData] = useState([]);\r\n  const [balancebranch, setBalanceBranch] = useState(\"\");\r\n  const [symbolbranch, setSymbolBranch] = useState(\"\");\r\n  const [detailsbranchid, setDetailsBranchID] = useState(\"\");\r\n  const [isconnectbuttonclicked, setIsConnectButtonClicked] = useState(false);\r\n  const [isApprovedButton, setIsApprovedButton] = useState(false);\r\n\r\n  useEffect(() => {\r\n\r\n\r\n    let temp_data = window.localStorage.getItem(\"DataC\");\r\n    if (temp_data) {\r\n      temp_data = JSON.parse(temp_data);\r\n      setArrayData(temp_data);\r\n    }\r\n\r\n    let temp_data_frx_det = window.localStorage.getItem(\"DataFrxDet\");\r\n    if (temp_data_frx_det) {\r\n      temp_data_frx_det = JSON.parse(temp_data_frx_det);\r\n      setArrayDataForexDet(temp_data_frx_det);\r\n    }\r\n\r\n    let temp_data_brr_det = window.localStorage.getItem(\"DataBrrDet\");\r\n    if (temp_data_brr_det) {\r\n      temp_data_brr_det = JSON.parse(temp_data_brr_det);\r\n      setArrayBorrowDet(temp_data_brr_det);\r\n    }\r\n\r\n    let temp_data_disp_brr_det = window.localStorage.getItem(\"DataBrrDispDet\");\r\n    if (temp_data_disp_brr_det) {\r\n      temp_data_disp_brr_det = JSON.parse(temp_data_disp_brr_det);\r\n      setArrayBorrowDispDet(temp_data_disp_brr_det);\r\n    }\r\n\r\n    if (temp_data && temp_data_frx_det && temp_data_brr_det)\r\n      return;\r\n\r\n\r\n  }, [arrayData, arrayDataForexDet, setArrayBorrowDet]);\r\n\r\n  async function addClient() {\r\n    try {\r\n      if (\r\n        typeof window !== \"undefined\" &&\r\n        typeof window.ethereum !== \"undefined\"\r\n      ) {\r\n        const accounts = await window.ethereum.enable();\r\n        console.log(\"accounts\", accounts);\r\n        const provider = await new ethers.providers.Web3Provider(\r\n          window.ethereum\r\n        );\r\n        const signer = await provider.getSigner();\r\n        console.log(\"Signer\", signer);\r\n        const address = await signer.getAddress();\r\n        console.log(address);\r\n      } else {\r\n        console.log(\"MemtaMask Not Installed!!!\");\r\n      }\r\n      const web3eth = new Web3(Web3.givenProvider);\r\n\r\n      const callContract = new web3eth.eth.Contract(\r\n        ABIbnksys,\r\n        contractAddressbnksys\r\n      );\r\n      const callContractECB = new web3eth.eth.Contract(\r\n        ABIEcb,\r\n        contractAddressEcb\r\n      );\r\n      const callContractFED = new web3eth.eth.Contract(\r\n        ABIFed,\r\n        contractAddressFed\r\n      );\r\n      if (web3eth.givenProvider) {\r\n        console.log(\"Hello Provider Here\", web3eth.givenProvider);\r\n        let address = web3eth.givenProvider.selectedAddress;\r\n        console.log(\"address\", address);\r\n\r\n        let IDByAddress = await callContract.methods\r\n          .idOfAddress(address)\r\n          .call();\r\n\r\n        if (IDByAddress.bankId == 0) {\r\n          setTokenSymbol(\"EUR\");\r\n          let responseEcb = await callContractECB.methods\r\n            .approve(contractAddressbnksys, 100000000000)\r\n            .send({ from: address, gas: 1000000 });\r\n          console.log(\"Response :\", responseEcb);\r\n          let response = await callContract.methods\r\n            .addClient(\r\n              IDByAddress.bankId,\r\n              branchid,\r\n              clientaddress,\r\n              amount * 100000000,\r\n              \"EUR\"\r\n            )\r\n            .send({ from: address, gas: 1000000 });\r\n          console.log(response);\r\n          let clientid1 = await callContract.methods\r\n            .clientCount(IDByAddress.bankId, branchid)\r\n            .call();\r\n\r\n          let clientDetails1 = await callContract.methods\r\n            .clients(IDByAddress.bankId, clientid1 - 1)\r\n            .call();\r\n          console.log(\"clientid1:\", clientid1);\r\n          console.log(\"clientDetails1:\", clientDetails1);\r\n\r\n          let tmp_data = arrayData;\r\n          tmp_data.push(clientDetails1);\r\n          console.log(tmp_data);\r\n          setArrayData(tmp_data);\r\n          window.localStorage.setItem(\"DataC\", JSON.stringify(tmp_data));\r\n          console.log(\"arrayData:\", arrayData);\r\n          console.log(\"arrayData:\", arrayData[0].amount);\r\n          console.log(\"arrayData:\", arrayData[0].client);\r\n        } else {\r\n          setTokenSymbol(\"USD\");\r\n          let responseFed = await callContractFED.methods\r\n            .approve(contractAddressbnksys, amount * 100000000)\r\n            .send({ from: address, gas: 1000000 });\r\n\r\n          console.log(\"Response :\", responseFed);\r\n          let response = await callContract.methods\r\n            .addClient(\r\n              IDByAddress.bankId,\r\n              branchid,\r\n              clientaddress,\r\n              amount * 100000000,\r\n              \"USD\"\r\n            )\r\n            .send({ from: address, gas: 1000000 });\r\n          console.log(response);\r\n\r\n          let clientid2 = await callContract.methods\r\n            .clientCount(IDByAddress.bankId, branchid)\r\n            .call();\r\n\r\n          let clientDetails2 = await callContract.methods\r\n            .clients(IDByAddress.bankId, clientid2 - 1)\r\n            .call();\r\n          console.log(\"clientid1:\", clientid2);\r\n          console.log(\"clientDetails1:\", clientDetails2);\r\n\r\n          let tmp_data = arrayData;\r\n          tmp_data.push(clientDetails2);\r\n          console.log(tmp_data);\r\n          setArrayData(tmp_data);\r\n          window.localStorage.setItem(\"DataC\", JSON.stringify(tmp_data));\r\n          console.log(\"arrayData:\", arrayData);\r\n          console.log(\"arrayData:\", arrayData[0].amount);\r\n          console.log(\"arrayData:\", arrayData[0].client);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(Error);\r\n    }\r\n  }\r\n\r\n  async function checkForexRequest() {\r\n    try {\r\n      if (\r\n        typeof window !== \"undefined\" &&\r\n        typeof window.ethereum !== \"undefined\"\r\n      ) {\r\n        const accounts = await window.ethereum.enable();\r\n        console.log(\"accounts\", accounts);\r\n        const provider = await new ethers.providers.Web3Provider(\r\n          window.ethereum\r\n        );\r\n        const signer = await provider.getSigner();\r\n        console.log(\"Signer\", signer);\r\n        const address = await signer.getAddress();\r\n        console.log(address);\r\n      } else {\r\n        console.log(\"MemtaMask Not Installed Maen\");\r\n      }\r\n      const web3eth = new Web3(Web3.givenProvider);\r\n\r\n      const callContract = new web3eth.eth.Contract(\r\n        ABIbnksys,\r\n        contractAddressbnksys\r\n      );\r\n      const callContractECB = new web3eth.eth.Contract(\r\n        ABIEcb,\r\n        contractAddressEcb\r\n      );\r\n      const callContractFED = new web3eth.eth.Contract(\r\n        ABIFed,\r\n        contractAddressFed\r\n      );\r\n      if (web3eth.givenProvider) {\r\n        console.log(\"Hello Provider Here\", web3eth.givenProvider);\r\n        let address = web3eth.givenProvider.selectedAddress;\r\n        console.log(\"address\", address);\r\n\r\n        let IDByAddress = await callContract.methods\r\n          .idOfAddress(address)\r\n          .call();\r\n\r\n        if (IDByAddress.bankId == 0) {\r\n          setTokenSymbol(\"EUR\");\r\n\r\n          let IDByAddress = await callContract.methods\r\n            .idOfAddress(address)\r\n            .call();\r\n\r\n          let balanceOf = await callContractECB.methods\r\n            .balanceOf(address)\r\n            .call();\r\n          setBalanceBranch(balanceOf);\r\n\r\n          let forexDetails = await callContract.methods\r\n            .forexDetails(address)\r\n            .call();\r\n          console.log(\"forexDetails\", forexDetails);\r\n\r\n          let ReqDetailsClient1 = await callContract.methods\r\n            .requestDetails(forexDetails.byClient, forexDetails.reqId)\r\n            .call();\r\n\r\n          let response = await callContract.methods\r\n            .sendForexRequestToBank(ReqDetailsClient1.fromBankId, ReqDetailsClient1.fromBranchId, forexDetails.clientId, ReqDetailsClient1.reqId) //Needs Debuging\r\n            .send({ from: address, gas: 1000000 });\r\n\r\n\r\n          let tmp_data = arrayDataForexDet;\r\n          tmp_data.push(ReqDetailsClient1);\r\n          console.log(tmp_data);\r\n          setArrayDataForexDet(tmp_data);\r\n          window.localStorage.setItem(\"DataFrxDet\", JSON.stringify(tmp_data));\r\n          console.log(\"rrayDataForexDet:\", arrayDataForexDet);\r\n          console.log(\"rrayDataForexDet:\", arrayDataForexDet[0].amount);\r\n          console.log(\"rrayDataForexDet:\", arrayDataForexDet[0].bank);\r\n        } else {\r\n          setTokenSymbol(\"USD\");\r\n\r\n          let balanceOf = await callContractFED.methods\r\n            .balanceOf(address)\r\n            .call();\r\n          setBalanceBranch(balanceOf);\r\n\r\n          let IDByAddress = await callContract.methods\r\n            .idOfAddress(address)\r\n            .call();\r\n\r\n          let forexDetails = await callContract.methods\r\n            .forexDetails(address)\r\n            .call();\r\n          console.log(\"forexDetails\", forexDetails);\r\n\r\n          let ReqDetailsClient1 = await callContract.methods\r\n            .requestDetails(forexDetails.byClient, forexDetails.reqId)\r\n            .call();\r\n\r\n          let response = await callContract.methods\r\n            .sendForexRequestToBank(\r\n              ReqDetailsClient1.fromBankId, ReqDetailsClient1.fromBranchId, forexDetails.clientId, ReqDetailsClient1.reqId\r\n            )\r\n            .send({ from: address, gas: 1000000 });\r\n\r\n          console.log(\"ReqDetailsAddress :\", forexDetails);\r\n          console.log(\"ReqDetailsClient1 :\", ReqDetailsClient1);\r\n\r\n          // response = {addres: hhkujiiio, status: true, id:555, amount:8885454}\r\n          let tmp_data = arrayDataForexDet;\r\n          tmp_data.push(ReqDetailsClient1);\r\n          console.log(\"tmp_data\", tmp_data);\r\n          setArrayDataForexDet(tmp_data);\r\n          window.localStorage.setItem(\"DataFrxDet\", JSON.stringify(tmp_data));\r\n          console.log(\"arrayDataForexDet:\", arrayDataForexDet[0].amount);\r\n          console.log(\"arrayDataForexDet:\", arrayDataForexDet[0].bank);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(Error);\r\n    }\r\n  }\r\n  async function checkDetails() {\r\n    try {\r\n      if (\r\n        typeof window !== \"undefined\" &&\r\n        typeof window.ethereum !== \"undefined\"\r\n      ) {\r\n        const accounts = await window.ethereum.enable();\r\n        console.log(\"accounts\", accounts);\r\n        const provider = await new ethers.providers.Web3Provider(\r\n          window.ethereum\r\n        );\r\n        const signer = await provider.getSigner();\r\n        console.log(\"Signer\", signer);\r\n        const address = await signer.getAddress();\r\n        console.log(address);\r\n      } else {\r\n        console.log(\"MemtaMask Not Installed Maen\");\r\n      }\r\n      const web3eth = new Web3(Web3.givenProvider);\r\n\r\n      const callContract = new web3eth.eth.Contract(\r\n        ABIbnksys,\r\n        contractAddressbnksys\r\n      );\r\n      const callContractECB = new web3eth.eth.Contract(\r\n        ABIEcb,\r\n        contractAddressEcb\r\n      );\r\n      const callContractFED = new web3eth.eth.Contract(\r\n        ABIFed,\r\n        contractAddressFed\r\n      );\r\n      if (web3eth.givenProvider) {\r\n        console.log(\"Hello Provider Here\", web3eth.givenProvider);\r\n        let address = web3eth.givenProvider.selectedAddress;\r\n        console.log(\"address\", address);\r\n\r\n        let IDByAddress = await callContract.methods\r\n          .idOfAddress(address)\r\n          .call();\r\n\r\n        if (IDByAddress.bankId == 0) {\r\n          setTokenSymbol(\"EUR\");\r\n          let IDByAddress = await callContract.methods\r\n            .idOfAddress(address)\r\n            .call();\r\n          setDetailsBranchID(IDByAddress.branchId);\r\n\r\n          let balanceOf = await callContractECB.methods\r\n            .balanceOf(address)\r\n            .call();\r\n          setBalanceBranch(balanceOf);\r\n        } else {\r\n          setTokenSymbol(\"USD\");\r\n\r\n          let IDByAddress = await callContract.methods\r\n            .idOfAddress(address)\r\n            .call();\r\n          setDetailsBranchID(IDByAddress.branchId);\r\n\r\n          let balanceOf = await callContractFED.methods\r\n            .balanceOf(address)\r\n            .call();\r\n          setBalanceBranch(balanceOf);\r\n        }\r\n      }\r\n      setIsConnectButtonClicked(true);\r\n    } catch (error) {\r\n      console.log(Error);\r\n    }\r\n  }\r\n\r\n  async function sendForexRequestBank() {\r\n    try {\r\n      if (\r\n        typeof window !== \"undefined\" &&\r\n        typeof window.ethereum !== \"undefined\"\r\n      ) {\r\n        const accounts = await window.ethereum.enable();\r\n        console.log(\"accounts\", accounts);\r\n        const provider = await new ethers.providers.Web3Provider(\r\n          window.ethereum\r\n        );\r\n        const signer = await provider.getSigner();\r\n        console.log(\"Signer\", signer);\r\n        const address = await signer.getAddress();\r\n        console.log(address);\r\n      } else {\r\n        console.log(\"MemtaMask Not Installed Maen\");\r\n      }\r\n      const web3eth = new Web3(Web3.givenProvider);\r\n\r\n      const callContract = new web3eth.eth.Contract(\r\n        ABIbnksys,\r\n        contractAddressbnksys\r\n      );\r\n      const callContractECB = new web3eth.eth.Contract(\r\n        ABIEcb,\r\n        contractAddressEcb\r\n      );\r\n      const callContractFED = new web3eth.eth.Contract(\r\n        ABIFed,\r\n        contractAddressFed\r\n      );\r\n      if (web3eth.givenProvider) {\r\n        console.log(\"Hello Provider Here\", web3eth.givenProvider);\r\n        let address = web3eth.givenProvider.selectedAddress;\r\n        console.log(\"address\", address);\r\n\r\n        let IDByAddress = await callContract.methods\r\n          .idOfAddress(address)\r\n          .call();\r\n\r\n        if (IDByAddress.bankId == 0) {\r\n          setTokenSymbol(\"EUR\");\r\n\r\n          let forexDetails = await callContract.methods\r\n            .forexDetails(address)\r\n            .call();\r\n\r\n          let response = await callContract.methods\r\n            .sendForexRequestToBank(\r\n              IDByAddress.bankId,\r\n              IDByAddress.branchId,\r\n              forexDetails.clientId,\r\n              forexDetails.reqId\r\n            )\r\n            .send({ from: address, gas: 1000000 });\r\n        } else {\r\n          setTokenSymbol(\"USD\");\r\n\r\n          let IDByAddress = await callContract.methods\r\n            .idOfAddress(address)\r\n            .call();\r\n\r\n          let forexDetails = await callContract.methods\r\n            .forexDetails(address)\r\n            .call();\r\n\r\n          let response = await callContract.methods\r\n            .sendForexRequestToBank(\r\n              IDByAddress.bankId,\r\n              IDByAddress.branchId,\r\n              forexDetails.clientId,\r\n              forexDetails.reqId\r\n            )\r\n            .send({ from: address, gas: 1000000 });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(Error);\r\n    }\r\n  }\r\n  async function processForexRequestBranch() {\r\n    try {\r\n      if (\r\n        typeof window !== \"undefined\" &&\r\n        typeof window.ethereum !== \"undefined\"\r\n      ) {\r\n        const accounts = await window.ethereum.enable();\r\n        console.log(\"accounts\", accounts);\r\n        const provider = await new ethers.providers.Web3Provider(\r\n          window.ethereum\r\n        );\r\n        const signer = await provider.getSigner();\r\n        console.log(\"Signer\", signer);\r\n        const address = await signer.getAddress();\r\n        console.log(address);\r\n      } else {\r\n        console.log(\"MemtaMask Not Installed Maen\");\r\n      }\r\n      const web3eth = new Web3(Web3.givenProvider);\r\n\r\n      const callContract = new web3eth.eth.Contract(\r\n        ABIbnksys,\r\n        contractAddressbnksys\r\n      );\r\n      const callContractECB = new web3eth.eth.Contract(\r\n        ABIEcb,\r\n        contractAddressEcb\r\n      );\r\n      const callContractFED = new web3eth.eth.Contract(\r\n        ABIFed,\r\n        contractAddressFed\r\n      );\r\n      if (web3eth.givenProvider) {\r\n        console.log(\"Hello Provider Here\", web3eth.givenProvider);\r\n        let address = web3eth.givenProvider.selectedAddress;\r\n        console.log(\"address\", address);\r\n\r\n        let IDByAddress = await callContract.methods\r\n          .idOfAddress(address)\r\n          .call();\r\n\r\n        let forexDetails = await callContract.methods\r\n          .forexDetails(address)\r\n          .call();\r\n\r\n        let IDByAddress2 = await callContract.methods\r\n          .idOfAddress(forexDetails.toClient)\r\n          .call();\r\n\r\n        let branchDetails = await callContract.methods\r\n          .branches(IDByAddress2.bankId, IDByAddress2.branchId)\r\n          .call();\r\n\r\n        let requestDetails = await callContract.methods\r\n          .requestDetails(forexDetails.byClient, forexDetails.reqId)\r\n          .call();\r\n\r\n        if (IDByAddress.bankId == 0) {\r\n          setTokenSymbol(\"EUR\");\r\n\r\n          let IDByAddress = await callContract.methods\r\n            .idOfAddress(address)\r\n            .call();\r\n\r\n          let forexDetails = await callContract.methods\r\n            .forexDetails(address)\r\n            .call();\r\n\r\n          let IDByAddress2 = await callContract.methods\r\n            .idOfAddress(forexDetails.toClient)\r\n            .call();\r\n\r\n          let branchDetails = await callContract.methods\r\n            .branches(IDByAddress2.bankId, IDByAddress2.branchId)\r\n            .call();\r\n\r\n          let requestDetails = await callContract.methods\r\n            .requestDetails(forexDetails.byClient, forexDetails.reqId)\r\n            .call();\r\n\r\n          let responseEcb = await callContractECB.methods\r\n            .approve(contractAddressbnksys, requestDetails.amountInEur)\r\n            .send({ from: address, gas: 1000000 });\r\n\r\n          let response = await callContract.methods\r\n            .processForexRequestByBranch(\r\n              requestDetails.toBankId,\r\n              requestDetails.toBranchId,\r\n              requestDetails.fromBankId,\r\n              requestDetails.fromBranchId,\r\n              requestDetails.reqId\r\n            )\r\n            .send({ from: address, gas: 1000000 });\r\n\r\n          let tmp_data = arrayDataForexDet;\r\n          tmp_data.push(requestDetails);\r\n          console.log(tmp_data);\r\n          setArrayDataForexDet(tmp_data);\r\n          window.localStorage.setItem(\"DataFrxDet\", JSON.stringify(tmp_data));\r\n          console.log(\"rrayDataForexDet:\", arrayDataForexDet);\r\n          console.log(\"rrayDataForexDet:\", arrayDataForexDet[0].amount);\r\n          console.log(\"rrayDataForexDet:\", arrayDataForexDet[0].bank);\r\n\r\n        } else {\r\n          setTokenSymbol(\"USD\");\r\n\r\n          let IDByAddress = await callContract.methods\r\n            .idOfAddress(address)\r\n            .call();\r\n\r\n          let forexDetails = await callContract.methods\r\n            .forexDetails(address)\r\n            .call();\r\n\r\n          let IDByAddress2 = await callContract.methods\r\n            .idOfAddress(forexDetails.toClient)\r\n            .call();\r\n\r\n          let branchDetails = await callContract.methods\r\n            .branches(IDByAddress2.bankId, IDByAddress2.branchId)\r\n            .call();\r\n\r\n          let requestDetails = await callContract.methods\r\n            .requestDetails(forexDetails.byClient, forexDetails.reqId)\r\n            .call();\r\n\r\n          let responseFed = await callContractFED.methods\r\n            .approve(contractAddressbnksys, requestDetails.amountInUsd)\r\n            .send({ from: address, gas: 1000000 });\r\n\r\n          let response = await callContract.methods\r\n            .processForexRequestByBranch(\r\n              requestDetails.toBankId,\r\n              requestDetails.toBranchId,\r\n              requestDetails.fromBankId,\r\n              requestDetails.fromBranchId,\r\n              requestDetails.reqId\r\n            )\r\n            .send({ from: address, gas: 1000000 });\r\n\r\n          let tmp_data = arrayDataForexDet;\r\n          tmp_data.push(requestDetails);\r\n          console.log(\"tmp_data\", tmp_data);\r\n          setArrayDataForexDet(tmp_data);\r\n          window.localStorage.setItem(\"DataFrxDet\", JSON.stringify(tmp_data));\r\n          console.log(\"arrayDataForexDet:\", arrayDataForexDet[0].amount);\r\n          console.log(\"arrayDataForexDet:\", arrayDataForexDet[0].bank);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(Error);\r\n    }\r\n  }\r\n\r\n  async function checkBorrowRequest() {\r\n    try {\r\n      if (\r\n        typeof window !== \"undefined\" &&\r\n        typeof window.ethereum !== \"undefined\"\r\n      ) {\r\n        const accounts = await window.ethereum.enable();\r\n        console.log(\"accounts\", accounts);\r\n        const provider = await new ethers.providers.Web3Provider(\r\n          window.ethereum\r\n        );\r\n        const signer = await provider.getSigner();\r\n        console.log(\"Signer\", signer);\r\n        const address = await signer.getAddress();\r\n        console.log(address);\r\n      } else {\r\n        console.log(\"MemtaMask Not Installed Maen\");\r\n      }\r\n      const web3eth = new Web3(Web3.givenProvider);\r\n\r\n      const callContract = new web3eth.eth.Contract(\r\n        ABIbnksys,\r\n        contractAddressbnksys\r\n      );\r\n      const callContractECB = new web3eth.eth.Contract(\r\n        ABIEcb,\r\n        contractAddressEcb\r\n      );\r\n      const callContractFED = new web3eth.eth.Contract(\r\n        ABIFed,\r\n        contractAddressFed\r\n      );\r\n      if (web3eth.givenProvider) {\r\n        console.log(\"Hello Provider Here\", web3eth.givenProvider);\r\n        let address = web3eth.givenProvider.selectedAddress;\r\n        console.log(\"address\", address);\r\n\r\n        let IDByAddress = await callContract.methods\r\n          .idOfAddress(address)\r\n          .call();\r\n\r\n        if (IDByAddress.bankId == 0) {\r\n          setTokenSymbol(\"EUR\");\r\n\r\n          let IDByAddress = await callContract.methods\r\n            .idOfAddress(address)\r\n            .call();\r\n\r\n          let borrowDetails = await callContract.methods\r\n            .borrowDetails(address)\r\n            .call();\r\n          console.log(\"borrowDetails\", borrowDetails);\r\n\r\n          let positionDetails1 = await callContract.methods\r\n            .positionDetails(borrowDetails.byClient, borrowDetails.positionId)\r\n            .call();\r\n\r\n          console.log(\"positionDetails1\", positionDetails1);\r\n\r\n          let tmp_data = arrayDataBorrowDispDet;\r\n          tmp_data.push(positionDetails1);\r\n          console.log(tmp_data);\r\n          setArrayBorrowDispDet(tmp_data);\r\n          window.localStorage.setItem(\"DataBrrDispDet\", JSON.stringify(tmp_data));\r\n          console.log(\"arrayData:\", arrayData);\r\n          console.log(\"arrayData:\", arrayData[0].isBorrowed);\r\n          console.log(\"arrayData:\", arrayData[0].isDone);\r\n        } else {\r\n          setTokenSymbol(\"USD\");\r\n\r\n          let IDByAddress = await callContract.methods\r\n            .idOfAddress(address)\r\n            .call();\r\n\r\n          let borrowDetails = await callContract.methods\r\n            .borrowDetails(address)\r\n            .call();\r\n          console.log(\"borrowDetails\", borrowDetails);\r\n\r\n          let positionDetails1 = await callContract.methods\r\n            .positionDetails(borrowDetails.byClient, borrowDetails.positionId)\r\n            .call();\r\n\r\n          console.log(\"positionDetails1\", positionDetails1);\r\n\r\n          let tmp_data = arrayDataBorrowDispDet;\r\n          tmp_data.push(positionDetails1);\r\n          console.log(tmp_data);\r\n          setArrayBorrowDispDet(tmp_data);\r\n          window.localStorage.setItem(\"DataBrrDispDet\", JSON.stringify(tmp_data));\r\n          console.log(\"arrayData:\", arrayData);\r\n          console.log(\"arrayData:\", arrayData[0].isBorrowed);\r\n          console.log(\"arrayData:\", arrayData[0].isDone);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(Error);\r\n    }\r\n  }\r\n\r\n  async function processLoan() {\r\n    try {\r\n      if (\r\n        typeof window !== \"undefined\" &&\r\n        typeof window.ethereum !== \"undefined\"\r\n      ) {\r\n        const accounts = await window.ethereum.enable();\r\n        console.log(\"accounts\", accounts);\r\n        const provider = await new ethers.providers.Web3Provider(\r\n          window.ethereum\r\n        );\r\n        const signer = await provider.getSigner();\r\n        console.log(\"Signer\", signer);\r\n        const address = await signer.getAddress();\r\n        console.log(address);\r\n      } else {\r\n        console.log(\"MemtaMask Not Installed Maen\");\r\n      }\r\n      const web3eth = new Web3(Web3.givenProvider);\r\n\r\n      const callContract = new web3eth.eth.Contract(\r\n        ABIbnksys,\r\n        contractAddressbnksys\r\n      );\r\n      const callContractECB = new web3eth.eth.Contract(\r\n        ABIEcb,\r\n        contractAddressEcb\r\n      );\r\n      const callContractFED = new web3eth.eth.Contract(\r\n        ABIFed,\r\n        contractAddressFed\r\n      );\r\n      if (web3eth.givenProvider) {\r\n        console.log(\"Hello Provider Here\", web3eth.givenProvider);\r\n        let address = web3eth.givenProvider.selectedAddress;\r\n        console.log(\"address\", address);\r\n\r\n        let IDByAddress = await callContract.methods\r\n          .idOfAddress(address)\r\n          .call();\r\n\r\n        if (IDByAddress.bankId == 0) {\r\n          setTokenSymbol(\"EUR\");\r\n\r\n          let IDByAddress = await callContract.methods\r\n            .idOfAddress(address)\r\n            .call();\r\n\r\n          let borrowDetails = await callContract.methods\r\n            .borrowDetails(address)\r\n            .call();\r\n          console.log(\"borrowDetails\", borrowDetails);\r\n\r\n\r\n\r\n          let positionDetails = await callContract.methods\r\n            .positionDetails(borrowDetails.byClient, borrowDetails.positionId)\r\n            .call();\r\n\r\n          console.log(\"borrowDetails :\", borrowDetails);\r\n          console.log(\"positionDetails :\", positionDetails);\r\n\r\n          let responseEcb = await callContractECB.methods\r\n            .approve(contractAddressbnksys, positionDetails.amountBorrowed)\r\n            .send({ from: address, gas: 1000000 });\r\n\r\n          let response = await callContract.methods\r\n            .processLoan(\r\n              positionDetails.bankId,\r\n              positionDetails.branchId,\r\n              positionDetails.clientId,\r\n              positionDetails.positionId\r\n            )\r\n            .send({ from: address, gas: 1000000 });\r\n\r\n          let positionDetails1 = await callContract.methods\r\n            .positionDetails(borrowDetails.byClient, borrowDetails.positionId)\r\n            .call();\r\n\r\n          console.log(\"positionDetails1\", positionDetails1);\r\n\r\n          let tmp_data = arrayDataBorrowDispDet;\r\n          tmp_data.push(positionDetails1);\r\n          console.log(tmp_data);\r\n          setArrayBorrowDispDet(tmp_data);\r\n          window.localStorage.setItem(\"DataBrrDispDet\", JSON.stringify(tmp_data));\r\n          console.log(\"arrayData:\", arrayData);\r\n          console.log(\"arrayData:\", arrayData[0].isBorrowed);\r\n          console.log(\"arrayData:\", arrayData[0].isDone);\r\n        } else {\r\n          setTokenSymbol(\"USD\");\r\n\r\n          let IDByAddress = await callContract.methods\r\n            .idOfAddress(address)\r\n            .call();\r\n\r\n          let borrowDetails = await callContract.methods\r\n            .borrowDetails(address)\r\n            .call();\r\n          console.log(\"borrowDetails\", borrowDetails);\r\n\r\n          let positionDetails = await callContract.methods\r\n            .positionDetails(borrowDetails.byClient, borrowDetails.positionId)\r\n            .call();\r\n\r\n          console.log(\"borrowDetails :\", borrowDetails);\r\n          console.log(\"positionDetails :\", positionDetails);\r\n\r\n          let responseFed = await callContractFED.methods\r\n            .approve(contractAddressbnksys, positionDetails.amountBorrowed)\r\n            .send({ from: address, gas: 1000000 });\r\n\r\n\r\n\r\n          let response = await callContract.methods\r\n            .processLoan(\r\n              positionDetails.bankId,\r\n              positionDetails.branchId,\r\n              positionDetails.clientId,\r\n              positionDetails.positionId\r\n            )\r\n            .send({ from: address, gas: 1000000 });\r\n\r\n          let positionDetails1 = await callContract.methods\r\n            .positionDetails(borrowDetails.byClient, borrowDetails.positionId)\r\n            .call();\r\n\r\n          console.log(\"positionDetails1\", positionDetails1);\r\n\r\n          let tmp_data = arrayDataBorrowDispDet;\r\n          tmp_data.push(positionDetails1);\r\n          console.log(tmp_data);\r\n          setArrayBorrowDispDet(tmp_data);\r\n          window.localStorage.setItem(\"DataBrrDispDet\", JSON.stringify(tmp_data));\r\n          console.log(\"arrayData:\", arrayData);\r\n          console.log(\"arrayData:\", arrayData[0].isBorrowed);\r\n          console.log(\"arrayData:\", arrayData[0].isDone);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(Error);\r\n    }\r\n    setIsApprovedButton(true)\r\n  }\r\n\r\n  async function approveBorrowRequest() {\r\n    try {\r\n      if (\r\n        typeof window !== \"undefined\" &&\r\n        typeof window.ethereum !== \"undefined\"\r\n      ) {\r\n        const accounts = await window.ethereum.enable();\r\n        console.log(\"accounts\", accounts);\r\n        const provider = await new ethers.providers.Web3Provider(\r\n          window.ethereum\r\n        );\r\n        const signer = await provider.getSigner();\r\n        console.log(\"Signer\", signer);\r\n        const address = await signer.getAddress();\r\n        console.log(address);\r\n      } else {\r\n        console.log(\"MemtaMask Not Installed Maen\");\r\n      }\r\n      const web3eth = new Web3(Web3.givenProvider);\r\n\r\n      const callContract = new web3eth.eth.Contract(\r\n        ABIbnksys,\r\n        contractAddressbnksys\r\n      );\r\n      const callContractECB = new web3eth.eth.Contract(\r\n        ABIEcb,\r\n        contractAddressEcb\r\n      );\r\n      const callContractFED = new web3eth.eth.Contract(\r\n        ABIFed,\r\n        contractAddressFed\r\n      );\r\n      if (web3eth.givenProvider) {\r\n        console.log(\"Hello Provider Here\", web3eth.givenProvider);\r\n        let address = web3eth.givenProvider.selectedAddress;\r\n        console.log(\"address\", address);\r\n\r\n        let IDByAddress = await callContract.methods\r\n          .idOfAddress(address)\r\n          .call();\r\n\r\n        if (IDByAddress.bankId == 0) {\r\n          setTokenSymbol(\"EUR\");\r\n\r\n          let borrowDetails = await callContract.methods\r\n            .borrowDetails(address)\r\n            .call();\r\n          console.log(\"borrowDetails\", borrowDetails);\r\n\r\n          let positionDetails = await callContract.methods\r\n            .positionDetails(borrowDetails.byClient, positionDetails.positionId)\r\n            .call();\r\n\r\n          let responseEcb = await callContractECB.methods\r\n            .approve(contractAddressbnksys, positionDetails.amountBorrowed)\r\n            .send({ from: address, gas: 1000000 });\r\n          console.log(\"Response :\", responseEcb);\r\n\r\n          let response = await callContract.methods\r\n            .processLoan(\r\n              positionDetails.bankId,\r\n              positionDetails.branchId,\r\n              positionDetails.clientId,\r\n              positionDetails.positionId\r\n            )\r\n            .send({ from: address, gas: 1000000 });\r\n        } else {\r\n          setTokenSymbol(\"USD\");\r\n\r\n          let borrowDetails = await callContract.methods\r\n            .borrowDetails(address)\r\n            .call();\r\n          console.log(\"borrowDetails\", borrowDetails);\r\n\r\n          let positionDetails = await callContract.methods\r\n            .positionDetails(borrowDetails.byClient, positionDetails.positionId)\r\n            .call();\r\n\r\n          let responseFed = await callContractFED.methods\r\n            .approve(contractAddressbnksys, positionDetails.amountBorrowed)\r\n            .send({ from: address, gas: 1000000 });\r\n          console.log(\"Response :\", responseFed);\r\n\r\n          let response = await callContract.methods\r\n            .processLoan(\r\n              positionDetails.bankId,\r\n              positionDetails.branchId,\r\n              positionDetails.clientId,\r\n              positionDetails.positionId\r\n            )\r\n            .send({ from: address, gas: 1000000 });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(Error);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Breadcrumb>\r\n        <Breadcrumb.Section href=\"/\" link>\r\n          Home\r\n        </Breadcrumb.Section>\r\n        <Breadcrumb.Divider />\r\n        <Breadcrumb.Section active>Branches</Breadcrumb.Section>\r\n      </Breadcrumb>\r\n\r\n      <div>\r\n        <Header as=\"h2\" icon textAlign=\"center\">\r\n          <Icon name=\"user circle outline\" circular />\r\n          <Header.Content> Branch</Header.Content>\r\n        </Header>\r\n        {/* <Image\r\n                    centered\r\n                    size=\"medium\"\r\n                    src=\"https://react.semantic-ui.com/images/wireframe/image.png\"\r\n                /> */}\r\n      </div>\r\n      <div>\r\n        {\" \"}\r\n        <Card.Group centered>\r\n          <Card>\r\n            <Card.Content>\r\n              <Card.Meta>Branch ID: {detailsbranchid}</Card.Meta>\r\n              <Card.Description>\r\n                Balance: {balancebranch / 10e7} {tokenSymbol}\r\n              </Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n              <div className=\"ui two buttons\">\r\n                {isconnectbuttonclicked ? (\r\n                  <></>\r\n                ) : (\r\n                  <Button secondary onClick={checkDetails}>\r\n                    Connect\r\n                  </Button>\r\n                )}\r\n              </div>\r\n            </Card.Content>\r\n          </Card>\r\n        </Card.Group>\r\n      </div>\r\n\r\n      <Form unstackable>\r\n        <Form.Group widths={4}>\r\n          <Form.Input\r\n            label=\"Branch ID\"\r\n            placeholder=\"0.\"\r\n            type=\"number\"\r\n            value={branchid}\r\n            onChange={(e) => setBranchID(e.target.value)}\r\n          />\r\n          <Form.Input\r\n            label=\"Client Address\"\r\n            placeholder=\"0x00...\"\r\n            type=\"text\"\r\n            value={clientaddress}\r\n            onChange={(e) => setClientAddress(e.target.value)}\r\n          />\r\n          <Form.Input\r\n            label=\"Amount\"\r\n            placeholder=\"10...\"\r\n            type=\"number\"\r\n            value={amount}\r\n            onChange={(e) => setAmount(e.target.value)}\r\n          />\r\n        </Form.Group>\r\n\r\n        <Button type=\"submit\" onClick={addClient}>\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n      <Divider />\r\n      <div>\r\n        <Table color=\"black\" key={colors} inverted>\r\n          <Table.Header>\r\n            <Table.Row>\r\n              <Table.HeaderCell>Client Address</Table.HeaderCell>\r\n              <Table.HeaderCell>Amount</Table.HeaderCell>\r\n              <Table.HeaderCell>BankId</Table.HeaderCell>\r\n              <Table.HeaderCell>Client ID</Table.HeaderCell>\r\n              <Table.HeaderCell>Approved</Table.HeaderCell>\r\n            </Table.Row>\r\n          </Table.Header>\r\n\r\n          <Table.Body>\r\n            {arrayData.length > 0 &&\r\n              arrayData.map((data, index) => {\r\n\r\n                return (\r\n                  <Table.Row key={index}>\r\n                    <Table.Cell>{data.client}</Table.Cell>\r\n                    <Table.Cell>\r\n                      {data.amount / 10e7} {data.tokenSymbol}\r\n                    </Table.Cell>\r\n                    <Table.Cell>{data.bankId}</Table.Cell>\r\n                    <Table.Cell>{data.branchId}</Table.Cell>\r\n                    <Table.Cell>True</Table.Cell>\r\n                  </Table.Row>\r\n                );\r\n              })}\r\n\r\n            {/* <Table.Row>\r\n      <Table.Cell>\"0x157840be5604f37284b00Ec5801B609710764566\"</Table.Cell>\r\n      <Table.Cell>{1000}</Table.Cell>\r\n      <Table.Cell>true</Table.Cell>\r\n    </Table.Row> */}\r\n          </Table.Body>\r\n        </Table>\r\n        <Divider />\r\n      </div>\r\n\r\n      <div>\r\n        {/* <Segment inverted>\r\n  <Image src='https://react.semantic-ui.com/images/wireframe/short-paragraph.png' />\r\n  <Divider inverted />\r\n\r\n</Segment> */}\r\n      </div>\r\n      <Header as=\"h2\" icon textAlign=\"center\">\r\n        <Icon name=\"wait\" circular />\r\n        <Header.Content>Pending Forex Requests</Header.Content>\r\n      </Header>\r\n      <Button secondary onClick={checkForexRequest}>View Requests</Button>\r\n      <Divider />\r\n      <div>\r\n        <Card.Group centered>\r\n          {arrayDataForexDet.length > 0 &&\r\n            arrayDataForexDet.map((data, index) => {\r\n              return (\r\n                <Card>\r\n                  <Card.Content>\r\n                    <Icon name=\"money bill alternate outline\" circular />\r\n                    <Card.Header>Forex Request: {data.reqId} </Card.Header>\r\n                    <Card.Meta>Amount {data.amountInUsd / 10e7} USD</Card.Meta>\r\n                    <Card.Meta>Amount {data.amountInEur / 10e7} EUR</Card.Meta>\r\n                    <Card.Meta>To Bank {data.toBankId}</Card.Meta>\r\n                    <Card.Meta>To Branch {data.toBranchId}</Card.Meta>\r\n                    <Card.Description>EUR/USD={data.amountInUsd/data.amountInEur}</Card.Description>\r\n                  </Card.Content>\r\n\r\n\r\n                </Card>\r\n              );\r\n            })}\r\n        </Card.Group>\r\n\r\n        <Divider />\r\n        <div>\r\n          <Header as=\"h2\" icon textAlign=\"center\">\r\n            <Header.Content>Forex Details</Header.Content>\r\n          </Header>\r\n          <Table color=\"black\" key={colors} inverted>\r\n            <Table.Header>\r\n              <Table.Row>\r\n                <Table.HeaderCell>To Client Address</Table.HeaderCell>\r\n                <Table.HeaderCell>Amount USD</Table.HeaderCell>\r\n                <Table.HeaderCell>Amount EUR</Table.HeaderCell>\r\n                <Table.HeaderCell>From Bank</Table.HeaderCell>\r\n                <Table.HeaderCell>From Branch</Table.HeaderCell>\r\n                <Table.HeaderCell>To Bank</Table.HeaderCell>\r\n                <Table.HeaderCell>To Branch</Table.HeaderCell>\r\n                <Table.HeaderCell>Status</Table.HeaderCell>\r\n\r\n              </Table.Row>\r\n            </Table.Header>\r\n\r\n            <Table.Body>\r\n              {arrayDataForexDet.length > 0 &&\r\n                arrayDataForexDet.map((data, index) => {\r\n                  // console.log(data[index]);\r\n                  return (\r\n                    <Table.Row key={index}>\r\n                      <Table.Cell>{data.toClient}</Table.Cell>\r\n                      <Table.Cell>\r\n                        {data.amountInUsd / 10e7}USD\r\n                      </Table.Cell>\r\n                      <Table.Cell>\r\n                        {data.amountInEur / 10e7} EUR\r\n                      </Table.Cell>\r\n                      <Table.Cell>{data.fromBankId}</Table.Cell>\r\n                      <Table.Cell>{data.fromBranchId}</Table.Cell>\r\n                      <Table.Cell>{data.toBankId}</Table.Cell>\r\n                      <Table.Cell>{data.toBranchId}</Table.Cell>\r\n                      <Table.Cell>\r\n                        {data.isSentToBank ? <Icon color='green' name='checkmark' size='large' /> : <Icon color='red' name='close' size='large' />}\r\n                      </Table.Cell>\r\n                      <Table.Cell>\r\n                        {\" \"}\r\n                        {data.isSentToBank ? <Button color=\"green\">Approved</Button> :  <Button basic color=\"green\" onClick={processForexRequestBranch}>Approve</Button>}\r\n\r\n                      </Table.Cell>\r\n                    </Table.Row>\r\n                  );\r\n                })}\r\n\r\n              {/* <Table.Row>\r\n      <Table.Cell>\"0x157840be5604f37284b00Ec5801B609710764566\"</Table.Cell>\r\n      <Table.Cell>{1000}</Table.Cell>\r\n      <Table.Cell>true</Table.Cell>\r\n    </Table.Row> */}\r\n            </Table.Body>\r\n          </Table>\r\n          <Divider />\r\n        </div>\r\n      </div>\r\n      <Divider />\r\n\r\n      <Header as=\"h2\" icon textAlign=\"center\">\r\n        <Icon name=\"wait\" circular />\r\n        <Header.Content>Pending Borrow Requests</Header.Content>\r\n\r\n      </Header>\r\n      <Button secondary onClick={checkBorrowRequest}>View Requests</Button>\r\n      <Divider />\r\n      <div>\r\n        <Card.Group centered>\r\n          {arrayDataBorrowDispDet.length > 0 &&\r\n            arrayDataBorrowDispDet.map((data, index) => {\r\n              return (\r\n                <Card>\r\n                  <Card.Content>\r\n                    <Icon name=\"handshake outline\" circular />\r\n                    <Card.Header>Borrow Request: {data.positionId} </Card.Header>\r\n                    <Card.Meta>Amount {data.amountBorrowed / 10e7} USD</Card.Meta>\r\n                    <Card.Meta>Status {data.isDone ? <Icon color='green' name='checkmark' size='large' /> : <Icon color='red' name='close' size='large' />}</Card.Meta>\r\n                    <Card.Description>Interest Rate {10} %</Card.Description>\r\n\r\n\r\n                  </Card.Content>\r\n\r\n                </Card>\r\n              );\r\n\r\n\r\n            })}\r\n        </Card.Group>\r\n        <div>\r\n          <Divider />\r\n          <Header as=\"h2\" icon textAlign=\"center\">\r\n            <Header.Content>Borrower Details </Header.Content>\r\n          </Header>\r\n          <Table color=\"black\" key={colors} inverted>\r\n            <Table.Header>\r\n              <Table.Row>\r\n                <Table.HeaderCell>Client ID</Table.HeaderCell>\r\n                <Table.HeaderCell>Amount Borrowed</Table.HeaderCell>\r\n                <Table.HeaderCell>Branch ID</Table.HeaderCell>\r\n                <Table.HeaderCell>Position ID</Table.HeaderCell>\r\n                <Table.HeaderCell>Status</Table.HeaderCell>\r\n                <Table.HeaderCell>Approved</Table.HeaderCell>\r\n\r\n              </Table.Row>\r\n            </Table.Header>\r\n\r\n            <Table.Body>\r\n              {arrayDataBorrowDispDet.length > 0 &&\r\n                arrayDataBorrowDispDet.map((data, index) => {\r\n                  // console.log(data[index]);\r\n                  return (\r\n                    <Table.Row key={index}>\r\n                      <Table.Cell>{data.clientId}</Table.Cell>\r\n                      <Table.Cell>{data.amountBorrowed / 10e7}</Table.Cell>\r\n                      <Table.Cell>{data.branchId}</Table.Cell>\r\n                      <Table.Cell>{data.positionId}</Table.Cell>\r\n                      <Table.Cell>{data.isBorrowed ? 'True' : 'False'}</Table.Cell>\r\n                      <Table.Cell>{data.isDone ? <Icon color='green' name='checkmark' size='large' /> : <Icon color='red' name='close' size='large' />}</Table.Cell>\r\n                      <Table.Cell>\r\n                        {\" \"}\r\n                        {data.isDone ? <Button color=\"green\" >Approved</Button> : <Button basic color=\"green\" onClick={processLoan}>Approve</Button>}\r\n                      </Table.Cell>\r\n                    </Table.Row>\r\n                  );\r\n                })}\r\n\r\n              {/* <Table.Row>\r\n      <Table.Cell>\"0x157840be5604f37284b00Ec5801B609710764566\"</Table.Cell>\r\n      <Table.Cell>{1000}</Table.Cell>\r\n      <Table.Cell>true</Table.Cell>\r\n    </Table.Row> */}\r\n            </Table.Body>\r\n          </Table>\r\n          <Divider />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default Branch;\r\n","C:\\Users\\VAI-DEV-001\\Documents\\GitHub\\banking\\Bankind_dapp\\src\\components\\Banking.js",["125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162"],[],"import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  Button,\r\n  Form,\r\n  Header,\r\n  Segment,\r\n  Icon,\r\n  Image,\r\n  Divider,\r\n  Card,\r\n  Breadcrumb,\r\n  Table,\r\n  Grid,\r\n  List,\r\n  Container\r\n} from \"semantic-ui-react\";\r\nimport { contractAddressFed, ABIFed } from \"../constants\";\r\nimport { contractAddressEcb, ABIEcb } from \"../constants\";\r\nimport { contractAddressbnksys, ABIbnksys } from \"../constants\";\r\nconst colors = [\"black\"];\r\n\r\nconst Web3 = require(\"web3\");\r\nconst ethers = require(\"ethers\");\r\n\r\nfunction Banking() {\r\n  const [frombankid, setFromBankID] = useState(\"\"); // Taken from call metamask\r\n  const [frombranchid, setFromBranchkID] = useState(\"\");\r\n  const [tobankid, setToBankid] = useState(\"\");\r\n  const [tobranchid, setToBranchid] = useState(\"\");\r\n  const [clientaddress, setClientAddress] = useState(\"\");\r\n  const [amount, setAmount] = useState(\"\");\r\n  const [tokensymbol, setTokenSymbol] = useState(\"\");\r\n  const [arrayDataF, setArrayDataF] = useState([]);\r\n  const [arrayDataBr, setArrayDataBr] = useState([]);\r\n  const [arrayDataloan, setArrayDataLoan] = useState([]);\r\n  const [arrayDataloanDet, setArrayDataLoanDet] = useState([]);\r\n  const [isconnected, setIsConnected] = useState(false);\r\n  const [isExit, setIsExit] = useState(false);\r\n\r\n  useEffect(() => {\r\n\r\n    // someForexDets()\r\n\r\n    let temp_dataF = window.localStorage.getItem(\"DataF\");\r\n    if (temp_dataF) {\r\n      temp_dataF = JSON.parse(temp_dataF);\r\n      setArrayDataF(temp_dataF);\r\n    }\r\n\r\n    let temp_dataBr = window.localStorage.getItem(\"DataBr\");\r\n    if (temp_dataBr) {\r\n      temp_dataBr = JSON.parse(temp_dataBr);\r\n      setArrayDataBr(temp_dataBr);\r\n    }\r\n\r\n    let temp_dataLoan = window.localStorage.getItem(\"DataLoan\");\r\n    if (temp_dataLoan) {\r\n      temp_dataLoan = JSON.parse(temp_dataLoan);\r\n      setArrayDataLoan(temp_dataLoan);\r\n    }\r\n\r\n    let temp_dataLoan_Det = window.localStorage.getItem(\"DataLoanDet\");\r\n    if (temp_dataLoan_Det) {\r\n      temp_dataLoan_Det = JSON.parse(temp_dataLoan_Det);\r\n      setArrayDataLoanDet(temp_dataLoan_Det);\r\n    }\r\n\r\n\r\n\r\n  }, [arrayDataF, arrayDataBr, arrayDataloan]);\r\n\r\n\r\n  async function someForexDets() {\r\n    try {\r\n      if (\r\n        typeof window !== \"undefined\" &&\r\n        typeof window.ethereum !== \"undefined\"\r\n      ) {\r\n        const accounts = await window.ethereum.enable();\r\n        console.log(\"accounts\", accounts);\r\n        const provider = await new ethers.providers.Web3Provider(\r\n          window.ethereum\r\n        );\r\n        const signer = await provider.getSigner();\r\n        console.log(\"Signer\", signer);\r\n        const address = await signer.getAddress();\r\n        console.log(address);\r\n      } else {\r\n        console.log(\"MemtaMask Not Installed Maen\");\r\n      }\r\n      const web3eth = new Web3(Web3.givenProvider);\r\n\r\n      const callContract = new web3eth.eth.Contract(\r\n        ABIbnksys,\r\n        contractAddressbnksys\r\n      );\r\n      const callContractECB = new web3eth.eth.Contract(\r\n        ABIEcb,\r\n        contractAddressEcb\r\n      );\r\n      const callContractFED = new web3eth.eth.Contract(\r\n        ABIFed,\r\n        contractAddressFed\r\n      );\r\n      if (web3eth.givenProvider) {\r\n        console.log(\"Hello Provider Here\", web3eth.givenProvider);\r\n        let address = web3eth.givenProvider.selectedAddress;\r\n        console.log(\"address\", address);\r\n\r\n        let IDByAddress = await callContract.methods\r\n          .idOfAddress(address)\r\n          .call();\r\n\r\n        if (IDByAddress.bankId == 0) {\r\n          setTokenSymbol(\"EUR\");\r\n\r\n          let IDByAddress = await callContract.methods\r\n            .idOfAddress(address)\r\n            .call();\r\n\r\n          let numOfRequest = await callContract.methods\r\n            .numOfRequest(address)\r\n            .call();\r\n\r\n          let ReqDetailsClient1 = await callContract.methods\r\n            .requestDetails(address, numOfRequest - 1)\r\n            .call();\r\n\r\n          let tmp_data = arrayDataF;\r\n          tmp_data.push(ReqDetailsClient1);\r\n          console.log(tmp_data);\r\n          setArrayDataF(tmp_data);\r\n          window.localStorage.setItem(\"DataF\", JSON.stringify(tmp_data));\r\n\r\n        } else {\r\n          setTokenSymbol(\"USD\");\r\n\r\n          let IDByAddress = await callContract.methods\r\n            .idOfAddress(address)\r\n            .call();\r\n\r\n          let numOfRequest = await callContract.methods\r\n            .numOfRequest(address)\r\n            .call();\r\n\r\n          let ReqDetailsClient1 = await callContract.methods\r\n            .requestDetails(address, numOfRequest - 1)\r\n            .call();\r\n\r\n          let tmp_data = arrayDataF;\r\n          tmp_data.push(ReqDetailsClient1);\r\n          console.log(tmp_data);\r\n          setArrayDataF(tmp_data);\r\n          window.localStorage.setItem(\"DataF\", JSON.stringify(tmp_data));\r\n\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(Error);\r\n    }\r\n\r\n\r\n\r\n  }\r\n\r\n  async function forex() {\r\n    try {\r\n      if (\r\n        typeof window !== \"undefined\" &&\r\n        typeof window.ethereum !== \"undefined\"\r\n      ) {\r\n        const accounts = await window.ethereum.enable();\r\n        console.log(\"accounts\", accounts);\r\n        const provider = await new ethers.providers.Web3Provider(\r\n          window.ethereum\r\n        );\r\n        const signer = await provider.getSigner();\r\n        console.log(\"Signer\", signer);\r\n        const address = await signer.getAddress();\r\n        console.log(address);\r\n      } else {\r\n        console.log(\"MemtaMask Not Installed Maen\");\r\n      }\r\n      const web3eth = new Web3(Web3.givenProvider);\r\n\r\n      const callContract = new web3eth.eth.Contract(\r\n        ABIbnksys,\r\n        contractAddressbnksys\r\n      );\r\n      const callContractECB = new web3eth.eth.Contract(\r\n        ABIEcb,\r\n        contractAddressEcb\r\n      );\r\n      const callContractFED = new web3eth.eth.Contract(\r\n        ABIFed,\r\n        contractAddressFed\r\n      );\r\n      if (web3eth.givenProvider) {\r\n        console.log(\"Hello Provider Here\", web3eth.givenProvider);\r\n        let address = web3eth.givenProvider.selectedAddress;\r\n        console.log(\"address\", address);\r\n\r\n        let IDByAddress = await callContract.methods\r\n          .idOfAddress(address)\r\n          .call();\r\n\r\n        let IDByAddress2 = await callContract.methods\r\n          .idOfAddress(clientaddress)\r\n          .call();\r\n\r\n        console.log(\r\n          \"IDByAddress.bankId, IDByAddress.branchId,IDByAddress.clientId, IDByAddress2.bankId, IDByAddress2.branchId, clientaddress, amount:\",\r\n          IDByAddress.bankId,\r\n          IDByAddress.branchId,\r\n          IDByAddress.clientId,\r\n          IDByAddress2.bankId,\r\n          IDByAddress2.branchId,\r\n          clientaddress,\r\n          amount\r\n        );\r\n\r\n        if (IDByAddress.bankId == 0) {\r\n          setTokenSymbol(\"EUR\");\r\n          let responseEcb = await callContractECB.methods\r\n            .approve(contractAddressbnksys, amount * 100000000)\r\n            .send({ from: address, gas: 1000000 });\r\n\r\n          let IDByAddress = await callContract.methods\r\n            .idOfAddress(address)\r\n            .call();\r\n\r\n          let IDByAddress2 = await callContract.methods\r\n            .idOfAddress(clientaddress)\r\n            .call();\r\n\r\n          let response = await callContract.methods\r\n            .forexRequestToBranchOfBank1(\r\n              IDByAddress.bankId,\r\n              IDByAddress.branchId,\r\n              IDByAddress.clientId,\r\n              IDByAddress2.bankId,\r\n              IDByAddress2.branchId,\r\n              clientaddress,\r\n              amount * 100000000\r\n            )\r\n            .send({ from: address, gas: 1000000 });\r\n\r\n          let numOfRequest = await callContract.methods\r\n            .numOfRequest(address)\r\n            .call();\r\n\r\n          let ReqDetailsClient1 = await callContract.methods\r\n            .requestDetails(address, numOfRequest - 1)\r\n            .call();\r\n\r\n          console.log(\"Response from addbank:\", numOfRequest);\r\n          console.log(\"call bank:\", ReqDetailsClient1);\r\n\r\n          let tmp_data = arrayDataF;\r\n          tmp_data.push(ReqDetailsClient1);\r\n          console.log(tmp_data);\r\n          setArrayDataF(tmp_data);\r\n          window.localStorage.setItem(\"DataF\", JSON.stringify(tmp_data));\r\n          console.log(\"arrayDataF:\", arrayDataF);\r\n          console.log(\"arrayDataF:\", arrayDataF[0].amount);\r\n          console.log(\"arrayDataF:\", arrayDataF[0].bank);\r\n        } else {\r\n          setTokenSymbol(\"USD\");\r\n\r\n          let responseFed = await callContractFED.methods\r\n            .approve(contractAddressbnksys, amount * 10e8)\r\n            .send({ from: address, gas: 1000000 });\r\n          console.log(\"Response :\", responseFed);\r\n\r\n          let IDByAddress = await callContract.methods\r\n            .idOfAddress(address)\r\n            .call();\r\n\r\n          let IDByAddress2 = await callContract.methods\r\n            .idOfAddress(clientaddress)\r\n            .call();\r\n\r\n          let response = await callContract.methods\r\n            .forexRequestToBranchOfBank2(\r\n              IDByAddress.bankId,\r\n              IDByAddress.branchId,\r\n              IDByAddress.clientId,\r\n              IDByAddress2.bankId,\r\n              IDByAddress2.branchId,\r\n              clientaddress,\r\n              amount * 100000000\r\n            )\r\n            .send({ from: address, gas: 1000000 });\r\n\r\n          let numOfRequest = await callContract.methods\r\n            .numOfRequest(address)\r\n            .call();\r\n\r\n          let ReqDetailsClient1 = await callContract.methods\r\n            .requestDetails(address, numOfRequest - 1)\r\n            .call();\r\n\r\n          console.log(\"ReqDetailsAddress :\", numOfRequest);\r\n          console.log(\"ReqDetailsClient1 :\", ReqDetailsClient1);\r\n\r\n          // response = {addres: hhkujiiio, status: true, id:555, amount:8885454}\r\n          let tmp_data = arrayDataF;\r\n          tmp_data.push(ReqDetailsClient1);\r\n          console.log(\"tmp_data\", tmp_data);\r\n          setArrayDataF(tmp_data);\r\n          window.localStorage.setItem(\"DataF\", JSON.stringify(tmp_data));\r\n          console.log(\"arrayDataF:\", arrayDataF[0].amount);\r\n          console.log(\"arrayDataF:\", arrayDataF[0].bank);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(Error);\r\n    }\r\n  }\r\n\r\n  async function borrow() {\r\n    try {\r\n      if (\r\n        typeof window !== \"undefined\" &&\r\n        typeof window.ethereum !== \"undefined\"\r\n      ) {\r\n        const accounts = await window.ethereum.enable();\r\n        console.log(\"accounts\", accounts);\r\n        const provider = await new ethers.providers.Web3Provider(\r\n          window.ethereum\r\n        );\r\n        const signer = await provider.getSigner();\r\n        console.log(\"Signer\", signer);\r\n        const address = await signer.getAddress();\r\n        console.log(address);\r\n      } else {\r\n        console.log(\"MemtaMask Not Installed Maen\");\r\n      }\r\n      const web3eth = new Web3(Web3.givenProvider);\r\n\r\n      const callContract = new web3eth.eth.Contract(\r\n        ABIbnksys,\r\n        contractAddressbnksys\r\n      );\r\n      const callContractECB = new web3eth.eth.Contract(\r\n        ABIEcb,\r\n        contractAddressEcb\r\n      );\r\n      const callContractFED = new web3eth.eth.Contract(\r\n        ABIFed,\r\n        contractAddressFed\r\n      );\r\n      if (web3eth.givenProvider) {\r\n        console.log(\"Hello Provider Here\", web3eth.givenProvider);\r\n        let address = web3eth.givenProvider.selectedAddress;\r\n        console.log(\"address\", address);\r\n\r\n        let IDByAddress = await callContract.methods\r\n          .idOfAddress(address)\r\n          .call();\r\n\r\n        if (IDByAddress.bankId == 0) {\r\n          setTokenSymbol(\"EUR\");\r\n\r\n          let IDByAddress = await callContract.methods\r\n            .idOfAddress(address)\r\n            .call();\r\n\r\n          console.log(\"amount!!!!!!!!!!!:\", amount);\r\n\r\n          let response = await callContract.methods\r\n            .borrowRequest(\r\n              IDByAddress.bankId,\r\n              IDByAddress.clientId,\r\n              amount * 100000000\r\n            )\r\n            .send({ from: address, gas: 1000000 });\r\n\r\n          let numOfPosition = await callContract.methods\r\n            .numOfPosition(address)\r\n            .call();\r\n\r\n          let positionDetails = await callContract.methods\r\n            .positionDetails(address, numOfPosition - 1)\r\n            .call();\r\n\r\n          console.log(\"numOfPosition:\", numOfPosition);\r\n          console.log(\"positionDetails:\", positionDetails);\r\n\r\n          let tmp_data = arrayDataBr;\r\n          tmp_data.push(positionDetails);\r\n          console.log(tmp_data);\r\n          setArrayDataBr(tmp_data);\r\n          window.localStorage.setItem(\"DataBr\", JSON.stringify(tmp_data));\r\n          console.log(\"arrayDataBr:\", arrayDataBr);\r\n          console.log(\"arrayDataBr:\", arrayDataBr[0].isClear);\r\n          console.log(\"arrayDataBr:\", arrayDataBr[0].bank);\r\n        } else {\r\n          setTokenSymbol(\"USD\");\r\n\r\n          let IDByAddress = await callContract.methods\r\n            .idOfAddress(address)\r\n            .call();\r\n\r\n          let response = await callContract.methods\r\n            .borrowRequest(\r\n              IDByAddress.bankId,\r\n              IDByAddress.clientId,\r\n              amount * 100000000\r\n            )\r\n            .send({ from: address, gas: 1000000 });\r\n\r\n          let numOfPosition = await callContract.methods\r\n            .numOfPosition(address)\r\n            .call();\r\n\r\n          let positionDetails = await callContract.methods\r\n            .positionDetails(address, numOfPosition - 1)\r\n            .call();\r\n\r\n          console.log(\"numOfPosition :\", numOfPosition);\r\n          console.log(\"positionDetails :\", positionDetails);\r\n\r\n          // response = {addres: hhkujiiio, status: true, id:555, amount:8885454}\r\n          let tmp_data = arrayDataBr;\r\n          tmp_data.push(positionDetails);\r\n          console.log(\"tmp_data\", tmp_data);\r\n          setArrayDataBr(tmp_data);\r\n          window.localStorage.setItem(\"DataBr\", JSON.stringify(tmp_data));\r\n          console.log(\"arrayData:\", arrayDataBr[0].amount);\r\n          console.log(\"arrayData:\", arrayDataBr[0].bank);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(Error);\r\n    }\r\n  }\r\n\r\n  async function clearLoan() {\r\n    try {\r\n      if (\r\n        typeof window !== \"undefined\" &&\r\n        typeof window.ethereum !== \"undefined\"\r\n      ) {\r\n        const accounts = await window.ethereum.enable();\r\n        console.log(\"accounts\", accounts);\r\n        const provider = await new ethers.providers.Web3Provider(\r\n          window.ethereum\r\n        );\r\n        const signer = await provider.getSigner();\r\n        console.log(\"Signer\", signer);\r\n        const address = await signer.getAddress();\r\n        console.log(address);\r\n      } else {\r\n        console.log(\"MemtaMask Not Installed Maen\");\r\n      }\r\n      const web3eth = new Web3(Web3.givenProvider);\r\n\r\n      const callContract = new web3eth.eth.Contract(\r\n        ABIbnksys,\r\n        contractAddressbnksys\r\n      );\r\n      const callContractECB = new web3eth.eth.Contract(\r\n        ABIEcb,\r\n        contractAddressEcb\r\n      );\r\n      const callContractFED = new web3eth.eth.Contract(\r\n        ABIFed,\r\n        contractAddressFed\r\n      );\r\n      if (web3eth.givenProvider) {\r\n        console.log(\"Hello Provider Here\", web3eth.givenProvider);\r\n        let address = web3eth.givenProvider.selectedAddress;\r\n        console.log(\"address\", address);\r\n\r\n        let IDByAddress = await callContract.methods\r\n          .idOfAddress(address)\r\n          .call();\r\n\r\n        if (IDByAddress.bankId == 0) {\r\n          setTokenSymbol(\"EUR\");\r\n\r\n          let IDByAddress = await callContract.methods\r\n            .idOfAddress(address)\r\n            .call();\r\n\r\n          let branchAddress = await callContract.methods\r\n            .branches(IDByAddress.bankId, IDByAddress.branchId)\r\n            .call();\r\n\r\n\r\n          let borrowDetails = await callContract.methods\r\n            .borrowDetails(branchAddress.branch)\r\n            .call();\r\n\r\n          let positionDetails = await callContract.methods\r\n            .positionDetails(borrowDetails.byClient, borrowDetails.positionId)\r\n            .call();\r\n\r\n          let calculateNumOfDays = await callContract.methods\r\n            .calculateNumOfDays(\r\n              IDByAddress.bankId,\r\n              IDByAddress.branchId,\r\n              positionDetails.positionId\r\n            )\r\n            .call();\r\n\r\n          let responseEcb = await callContractECB.methods\r\n            .approve(contractAddressbnksys, positionDetails.amountBorrowed)\r\n            .send({ from: address, gas: 1000000 });\r\n          console.log(\"Response :\", responseEcb);\r\n\r\n          let response = await callContract.methods\r\n            .clearLoan(\r\n              positionDetails.bankId,\r\n              positionDetails.branchId,\r\n              positionDetails.positionId,\r\n              positionDetails.clientId\r\n            )\r\n            .send({ from: address, gas: 1000000 });\r\n\r\n            let positionDetails1 = await callContract.methods\r\n            .positionDetails(borrowDetails.byClient, borrowDetails.positionId)\r\n            .call();\r\n\r\n          let tmp_data_br = arrayDataBr;\r\n          tmp_data_br.push(positionDetails1);\r\n          console.log(tmp_data_br);\r\n          setArrayDataBr(tmp_data_br);\r\n          window.localStorage.setItem(\"DataBr\", JSON.stringify(tmp_data_br));\r\n\r\n          // let tmp_data = arrayDataloan;\r\n          // tmp_data.push(positionDetails);\r\n          // console.log(tmp_data);\r\n          // setArrayDataLoan(tmp_data);\r\n          // window.localStorage.setItem(\"DataLoan\", JSON.stringify(tmp_data));\r\n          // console.log(\"arrayDataloan:\", arrayDataloan);\r\n          // console.log(\"arrayDataloan:\", arrayDataloan[0].amount);\r\n          // console.log(\"arrayDataloan:\", arrayDataloan[0].bank);\r\n        } else {\r\n          setTokenSymbol(\"USD\");\r\n\r\n          let IDByAddress = await callContract.methods\r\n            .idOfAddress(address)\r\n            .call();\r\n\r\n          let branchAddress = await callContract.methods\r\n            .branches(IDByAddress.bankId, IDByAddress.branchId)\r\n            .call();\r\n\r\n          let borrowDetails = await callContract.methods\r\n            .borrowDetails(branchAddress.branch)\r\n            .call();\r\n          console.log(\"borrowDetails\", borrowDetails);\r\n\r\n          let positionDetails = await callContract.methods\r\n            .positionDetails(borrowDetails.byClient, borrowDetails.positionId)\r\n            .call();\r\n\r\n          let calculateNumOfDays = await callContract.methods\r\n            .calculateNumOfDays(\r\n              positionDetails.bankId,\r\n              positionDetails.branchId,\r\n              positionDetails.positionId\r\n            )\r\n            .call();\r\n\r\n          let responseFed = await callContractFED.methods\r\n            .approve(contractAddressbnksys, positionDetails.amountBorrowed)\r\n            .send({ from: address, gas: 1000000 });\r\n          console.log(\"Response :\", responseFed);\r\n\r\n          let response = await callContract.methods\r\n            .clearLoan(\r\n              positionDetails.bankId,\r\n              positionDetails.branchId,\r\n              positionDetails.positionId,\r\n              positionDetails.clientId\r\n            )\r\n            .send({ from: address, gas: 1000000 });\r\n\r\n\r\n            let positionDetails1 = await callContract.methods\r\n            .positionDetails(borrowDetails.byClient, borrowDetails.positionId)\r\n            .call();\r\n\r\n\r\n          let tmp_data_br = arrayDataBr;\r\n          tmp_data_br.push(positionDetails1);\r\n          console.log(tmp_data_br);\r\n          setArrayDataBr(tmp_data_br);\r\n          window.localStorage.setItem(\"DataBr\", JSON.stringify(tmp_data_br));\r\n\r\n          // let tmp_data = arrayDataloan;\r\n          // tmp_data.push(positionDetails);\r\n          // console.log(tmp_data);\r\n          // setArrayDataLoan(tmp_data);\r\n          // window.localStorage.setItem(\"DataLoan\", JSON.stringify(tmp_data));\r\n          // console.log(\"arrayDataloan:\", arrayDataloan);\r\n          // console.log(\"arrayDataloan:\", arrayDataloan[0].amount);\r\n          // console.log(\"arrayDataloan:\", arrayDataloan[0].bank);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(Error);\r\n    }\r\n    setIsExit(true)\r\n  }\r\n\r\n  async function giveDetails() {\r\n    try {\r\n      setIsConnected(true)\r\n      if (\r\n        typeof window !== \"undefined\" &&\r\n        typeof window.ethereum !== \"undefined\"\r\n      ) {\r\n        const accounts = await window.ethereum.enable();\r\n        console.log(\"accounts\", accounts);\r\n        const provider = await new ethers.providers.Web3Provider(\r\n          window.ethereum\r\n        );\r\n        const signer = await provider.getSigner();\r\n        console.log(\"Signer\", signer);\r\n        const address = await signer.getAddress();\r\n        console.log(address);\r\n      } else {\r\n        console.log(\"MemtaMask Not Installed Maen\");\r\n      }\r\n      const web3eth = new Web3(Web3.givenProvider);\r\n\r\n      const callContract = new web3eth.eth.Contract(\r\n        ABIbnksys,\r\n        contractAddressbnksys\r\n      );\r\n      const callContractECB = new web3eth.eth.Contract(\r\n        ABIEcb,\r\n        contractAddressEcb\r\n      );\r\n      const callContractFED = new web3eth.eth.Contract(\r\n        ABIFed,\r\n        contractAddressFed\r\n      );\r\n      if (web3eth.givenProvider) {\r\n        console.log(\"Hello Provider Here\", web3eth.givenProvider);\r\n        let address = web3eth.givenProvider.selectedAddress;\r\n        console.log(\"address\", address);\r\n\r\n        let IDByAddress = await callContract.methods\r\n          .idOfAddress(address)\r\n          .call();\r\n\r\n        if (IDByAddress.bankId == 0) {\r\n          setTokenSymbol(\"EUR\");\r\n\r\n          let IDByAddress = await callContract.methods\r\n            .idOfAddress(address)\r\n            .call();\r\n\r\n          let borrowDetails = await callContract.methods\r\n            .borrowDetails(address)\r\n            .call();\r\n          console.log(\"borrowDetails\", borrowDetails);\r\n\r\n          let positionDetails = await callContract.methods\r\n            .positionDetails(borrowDetails.byClient, positionDetails.positionId)\r\n            .call();\r\n\r\n          let calculateNumOfDays = await callContract.methods\r\n            .calculateNumOfDays(\r\n              IDByAddress.bankId,\r\n              IDByAddress.branchId,\r\n              positionDetails.positionId\r\n            )\r\n            .call();\r\n\r\n          let tmp_data = arrayDataloanDet;\r\n          tmp_data.push(positionDetails);\r\n          console.log(tmp_data);\r\n          setArrayDataLoanDet(tmp_data);\r\n          window.localStorage.setItem(\"DataLoanDet\", JSON.stringify(tmp_data));\r\n          console.log(\"arrayDataloan:\", arrayDataloan);\r\n          console.log(\"arrayDataloan:\", arrayDataloan[0].amount);\r\n          console.log(\"arrayDataloan:\", arrayDataloan[0].bank);\r\n        } else {\r\n          setTokenSymbol(\"USD\");\r\n\r\n          let IDByAddress = await callContract.methods\r\n            .idOfAddress(address)\r\n            .call();\r\n\r\n          let borrowDetails = await callContract.methods\r\n            .borrowDetails(address)\r\n            .call();\r\n          console.log(\"borrowDetails\", borrowDetails);\r\n\r\n          let positionDetails = await callContract.methods\r\n            .positionDetails(borrowDetails.byClient, positionDetails.positionId)\r\n            .call();\r\n\r\n          let calculateNumOfDays = await callContract.methods\r\n            .calculateNumOfDays(\r\n              IDByAddress.bankId,\r\n              IDByAddress.branchId,\r\n              positionDetails.positionId\r\n            )\r\n            .call();\r\n\r\n          let tmp_data = arrayDataloanDet;\r\n          tmp_data.push(positionDetails);\r\n          console.log(tmp_data);\r\n          setArrayDataLoanDet(tmp_data);\r\n          window.localStorage.setItem(\"DataLoanDet\", JSON.stringify(tmp_data));\r\n          console.log(\"arrayDataloan:\", arrayDataloan);\r\n          console.log(\"arrayDataloan:\", arrayDataloan[0].amount);\r\n          console.log(\"arrayDataloan:\", arrayDataloan[0].bank);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(Error);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        {isconnected ? (\r\n          <></>\r\n        ) : (\r\n          <Button floated=\"right\" secondary onClick={giveDetails}>\r\n            Connect\r\n          </Button>\r\n        )}\r\n\r\n        <Breadcrumb>\r\n          <Breadcrumb.Section href=\"/\" link>\r\n            Home\r\n          </Breadcrumb.Section>\r\n          <Breadcrumb.Divider />\r\n          <Breadcrumb.Section active>Banking</Breadcrumb.Section>\r\n        </Breadcrumb>\r\n\r\n        {isconnected ? (\r\n          <Card centered>\r\n            <Image\r\n              src=\"https://react.semantic-ui.com/images/avatar/large/matthew.png\"\r\n              wrapped\r\n              ui={false}\r\n            />\r\n            <Card.Content>\r\n              <Card.Header>Afzal</Card.Header>\r\n\r\n              <Card.Meta>\r\n                <span className=\"date\">client ID: {0}</span>\r\n              </Card.Meta>\r\n              <Card.Description>\r\n                Afzal is a client of Bank of New York.\r\n              </Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n              <a>\r\n                <Icon name=\"money bill alternate outline\" />\r\n                {1000} EUR\r\n              </a>\r\n            </Card.Content>\r\n          </Card>\r\n        ) : (\r\n          <></>\r\n        )}\r\n      </div>\r\n      <Divider />\r\n\r\n      <div>\r\n        <Header as=\"h2\" icon textAlign=\"center\">\r\n          <Icon name=\"money\" circular />\r\n          <Header.Content>Forex </Header.Content>\r\n        </Header>\r\n        <Image\r\n          centered\r\n          size=\"large\"\r\n          src=\"https://react.semantic-ui.com/images/wireframe/centered-paragraph.png\"\r\n        />\r\n      </div>\r\n\r\n      <Form unstackable>\r\n        <Form.Group widths={2}>\r\n          <Form.Input\r\n            label=\"Reciever Address\"\r\n            placeholder=\"0xfsc257d...\"\r\n            type=\"text\"\r\n            value={clientaddress}\r\n            onChange={(e) => setClientAddress(e.target.value)}\r\n          />\r\n          <Form.Input\r\n            label=\"Amount\"\r\n            placeholder=\"10\"\r\n            type=\"number\"\r\n            value={amount}\r\n            onChange={(e) => setAmount(e.target.value)}\r\n          />\r\n        </Form.Group>\r\n\r\n        {/* {centralbankid ? <Button type=\"submit\" onClick={addbank()}>Submit</Button> :<div>Ereor</div> } */}\r\n        <Button type=\"submit\" onClick={forex}>\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n      <Divider hidden />\r\n\r\n      <div>\r\n        <Header as=\"h2\" icon textAlign=\"center\">\r\n          <Header.Content>Forex Statement </Header.Content>\r\n        </Header>\r\n\r\n        <Table color=\"black\" key={colors} inverted>\r\n          <Table.Header>\r\n            <Table.Row>\r\n              <Table.HeaderCell>Receiver Address</Table.HeaderCell>\r\n              <Table.HeaderCell>Amount USD</Table.HeaderCell>\r\n              <Table.HeaderCell>Amount EUR</Table.HeaderCell>\r\n              <Table.HeaderCell>Req ID</Table.HeaderCell>\r\n              <Table.HeaderCell>Approved</Table.HeaderCell>\r\n              <Table.HeaderCell>Status</Table.HeaderCell>\r\n            </Table.Row>\r\n          </Table.Header>\r\n\r\n          <Table.Body>\r\n            {arrayDataF.length > 0 &&\r\n              arrayDataF.map((data, index) => {\r\n                console.log(data[index]);\r\n                return (\r\n                  <Table.Row key={index}>\r\n\r\n                    <Table.Cell>{data.toClient}</Table.Cell>\r\n                    <Table.Cell>{data.amountInUsd / 10e7} USD</Table.Cell>\r\n                    <Table.Cell>{data.amountInEur / 10e7} EUR</Table.Cell>\r\n                    <Table.Cell>{data.reqId}</Table.Cell>\r\n                    <Table.Cell>\r\n                      {data.isDepositedToBranch ? \"True\" : \"False\"}\r\n                    </Table.Cell>\r\n                    <Table.Cell>{data.isDone ? \"True\" : \"False\"}</Table.Cell>\r\n\r\n                  </Table.Row>\r\n                );\r\n              })}\r\n\r\n            {/* false displayed for data.isDOne as initially forexrequest put a false in the local store now when i rretrie it gives the same old result  */}\r\n\r\n            {/* <Table.Row>\r\n<Table.Cell>\"0x157840be5604f37284b00Ec5801B609710764566\"</Table.Cell>\r\n<Table.Cell>{1000}</Table.Cell>\r\n<Table.Cell>true</Table.Cell>\r\n</Table.Row> */}\r\n          </Table.Body>\r\n        </Table>\r\n      </div>\r\n      <Divider />\r\n\r\n      <div>\r\n        <Header as=\"h2\" icon textAlign=\"center\">\r\n          <Icon name=\"handshake outline\" circular />\r\n          <Header.Content>Lending </Header.Content>\r\n        </Header>\r\n        <Image\r\n          centered\r\n          size=\"large\"\r\n          src=\"https://react.semantic-ui.com/images/wireframe/centered-paragraph.png\"\r\n        />\r\n      </div>\r\n\r\n      <Form unstackable>\r\n        <Form.Group widths={2}>\r\n          <Form.Input label=\"Branch ID\" placeholder=\"0\" type=\"text\" />\r\n          <Form.Input\r\n            label=\"Amount\"\r\n            placeholder=\"10...\"\r\n            type=\"text\"\r\n            value={amount}\r\n            onChange={(e) => setAmount(e.target.value)}\r\n          />\r\n        </Form.Group>\r\n\r\n        {/* {centralbankid ? <Button type=\"submit\" onClick={addbank()}>Submit</Button> :<div>Ereor</div> } */}\r\n        <Button type=\"submit\" onClick={borrow}>\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n      <div>\r\n        <Header as=\"h2\" icon textAlign=\"center\">\r\n          <Header.Content>Lending Statement </Header.Content>\r\n        </Header>\r\n\r\n        <Table color=\"black\" key={colors} inverted>\r\n          <Table.Header>\r\n            <Table.Row>\r\n              <Table.HeaderCell>Borrowed Amount</Table.HeaderCell>\r\n              <Table.HeaderCell>Bank ID</Table.HeaderCell>\r\n              <Table.HeaderCell>Client ID</Table.HeaderCell>\r\n              <Table.HeaderCell>Position ID</Table.HeaderCell>\r\n              {/* <Table.HeaderCell>Interest Occured</Table.HeaderCell> */}\r\n              <Table.HeaderCell>Status</Table.HeaderCell>\r\n              <Table.HeaderCell>Clear Loan</Table.HeaderCell>\r\n\r\n\r\n            </Table.Row>\r\n          </Table.Header>\r\n\r\n          <Table.Body>\r\n            {arrayDataBr.length > 0 &&\r\n              arrayDataBr.map((data, index) => {\r\n                console.log(data[index]);\r\n                return (\r\n                  <Table.Row key={index}>\r\n                    <Table.Cell>{data.amountBorrowed / 10e7}</Table.Cell>\r\n                    <Table.Cell>{data.bankId}</Table.Cell>\r\n                    <Table.Cell>{data.clientId}</Table.Cell>\r\n                    <Table.Cell>{data.positionId}</Table.Cell>\r\n                    <Table.Cell>\r\n                      {data.isBorrowed ? \"True\" : \"False\"}\r\n                    </Table.Cell>\r\n                    {data.isClear ? <Icon color='green' name='checkmark' size='large' /> : <Button basic color=\"green\" onClick={clearLoan}>Exit</Button>}\r\n\r\n                  </Table.Row>\r\n                );\r\n              })}\r\n\r\n            {/* <Table.Row>\r\n<Table.Cell>\"0x157840be5604f37284b00Ec5801B609710764566\"</Table.Cell>\r\n<Table.Cell>{1000}</Table.Cell>\r\n<Table.Cell>true</Table.Cell>\r\n</Table.Row> */}\r\n          </Table.Body>\r\n        </Table>\r\n      </div>\r\n\r\n      <div>\r\n        <Divider />\r\n\r\n        <Segment inverted vertical style={{ padding: '5em 0em' }}>\r\n          <Container>\r\n            <Grid divided inverted stackable>\r\n              <Grid.Row>\r\n                <Grid.Column width={3}>\r\n                  <Header inverted as='h4' content='About' />\r\n                  <List link inverted>\r\n                    <List.Item as='a'>Sitemap</List.Item>\r\n                    <List.Item as='a'>Contact Us</List.Item>\r\n                    <List.Item as='a'>Crypto meets</List.Item>\r\n                    <List.Item as='a'>Future Plans</List.Item>\r\n                  </List>\r\n                </Grid.Column>\r\n                <Grid.Column width={3}>\r\n                  <Header inverted as='h4' content='Services' />\r\n                  <List link inverted>\r\n                    <List.Item as={Link} to='/banking'>Decentralized Forex</List.Item>\r\n                    <List.Item as='a'>Lending</List.Item>\r\n                    <List.Item as='a'>Transfer</List.Item>\r\n                    <List.Item as='a'> Token Swap</List.Item>\r\n                  </List>\r\n                </Grid.Column>\r\n                <Grid.Column width={7}>\r\n                  <Header as='h4' inverted>\r\n                    Trust and Security\r\n                  </Header>\r\n                  <p>\r\n                    We Served Our Customer Since The start of the Blockchain Technology.\r\n                  </p>\r\n                </Grid.Column>\r\n              </Grid.Row>\r\n            </Grid>\r\n          </Container>\r\n        </Segment>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default Banking;\r\n\r\n// <Form.Group widths={2}>\r\n// <Form.Input label=\"Bank Adress\" placeholder=\"0xfsc257d...\" type=\"text\"\r\n//   value={bankaddress}\r\n//   onChange={(e) => setClientAddress(e.target.value)} />\r\n// <Form.Input label=\"Amount\" placeholder=\"10\" type=\"text\"\r\n//   value={amount}\r\n//   onChange={(e) => setAmount(e.target.value)} />\r\n// <Form.Input label=\"Central Bank ID\" placeholder=\"0\" type=\"text\"\r\n//   value={centralbankid}\r\n//   onChange={(e) => setCentralBankID(e.target.value)} />\r\n// </Form.Group>\r\n","C:\\Users\\VAI-DEV-001\\Documents\\GitHub\\banking\\Bankind_dapp\\src\\constants.js",[],[],{"ruleId":"163","severity":1,"message":"164","line":17,"column":7,"nodeType":"165","messageId":"166","endLine":17,"endColumn":13},{"ruleId":"163","severity":1,"message":"167","line":18,"column":5,"nodeType":"165","messageId":"166","endLine":18,"endColumn":9},{"ruleId":"168","severity":1,"message":"169","line":98,"column":5,"nodeType":"170","messageId":"171","endLine":100,"endColumn":6},{"ruleId":"172","severity":1,"message":"173","line":334,"column":21,"nodeType":"174","endLine":334,"endColumn":33},{"ruleId":"163","severity":1,"message":"175","line":7,"column":31,"nodeType":"165","messageId":"166","endLine":7,"endColumn":38},{"ruleId":"163","severity":1,"message":"176","line":7,"column":56,"nodeType":"165","messageId":"166","endLine":7,"endColumn":66},{"ruleId":"163","severity":1,"message":"177","line":24,"column":10,"nodeType":"165","messageId":"166","endLine":24,"endColumn":23},{"ruleId":"163","severity":1,"message":"178","line":24,"column":25,"nodeType":"165","messageId":"166","endLine":24,"endColumn":41},{"ruleId":"179","severity":1,"message":"180","line":41,"column":6,"nodeType":"181","endLine":41,"endColumn":17,"suggestions":"182"},{"ruleId":"183","severity":1,"message":"184","line":74,"column":20,"nodeType":"185","messageId":"186","endLine":74,"endColumn":22},{"ruleId":"163","severity":1,"message":"187","line":76,"column":15,"nodeType":"165","messageId":"166","endLine":76,"endColumn":26},{"ruleId":"163","severity":1,"message":"188","line":3,"column":20,"nodeType":"165","messageId":"166","endLine":3,"endColumn":23},{"ruleId":"163","severity":1,"message":"189","line":22,"column":10,"nodeType":"165","messageId":"166","endLine":22,"endColumn":19},{"ruleId":"163","severity":1,"message":"190","line":22,"column":21,"nodeType":"165","messageId":"166","endLine":22,"endColumn":33},{"ruleId":"163","severity":1,"message":"191","line":23,"column":10,"nodeType":"165","messageId":"166","endLine":23,"endColumn":14},{"ruleId":"163","severity":1,"message":"192","line":23,"column":16,"nodeType":"165","messageId":"166","endLine":23,"endColumn":23},{"ruleId":"183","severity":1,"message":"184","line":68,"column":27,"nodeType":"185","messageId":"186","endLine":68,"endColumn":29},{"ruleId":"163","severity":1,"message":"187","line":70,"column":15,"nodeType":"165","messageId":"166","endLine":70,"endColumn":26},{"ruleId":"163","severity":1,"message":"193","line":8,"column":3,"nodeType":"165","messageId":"166","endLine":8,"endColumn":8},{"ruleId":"163","severity":1,"message":"175","line":9,"column":3,"nodeType":"165","messageId":"166","endLine":9,"endColumn":10},{"ruleId":"163","severity":1,"message":"194","line":25,"column":10,"nodeType":"165","messageId":"166","endLine":25,"endColumn":16},{"ruleId":"163","severity":1,"message":"195","line":25,"column":18,"nodeType":"165","messageId":"166","endLine":25,"endColumn":27},{"ruleId":"163","severity":1,"message":"177","line":30,"column":10,"nodeType":"165","messageId":"166","endLine":30,"endColumn":23},{"ruleId":"163","severity":1,"message":"178","line":30,"column":25,"nodeType":"165","messageId":"166","endLine":30,"endColumn":41},{"ruleId":"163","severity":1,"message":"196","line":33,"column":10,"nodeType":"165","messageId":"166","endLine":33,"endColumn":28},{"ruleId":"163","severity":1,"message":"197","line":35,"column":10,"nodeType":"165","messageId":"166","endLine":35,"endColumn":22},{"ruleId":"163","severity":1,"message":"198","line":35,"column":24,"nodeType":"165","messageId":"166","endLine":35,"endColumn":39},{"ruleId":"163","severity":1,"message":"199","line":37,"column":10,"nodeType":"165","messageId":"166","endLine":37,"endColumn":22},{"ruleId":"163","severity":1,"message":"200","line":37,"column":24,"nodeType":"165","messageId":"166","endLine":37,"endColumn":39},{"ruleId":"163","severity":1,"message":"201","line":40,"column":10,"nodeType":"165","messageId":"166","endLine":40,"endColumn":26},{"ruleId":"183","severity":1,"message":"184","line":116,"column":32,"nodeType":"185","messageId":"186","endLine":116,"endColumn":34},{"ruleId":"183","severity":1,"message":"184","line":234,"column":32,"nodeType":"185","messageId":"186","endLine":234,"endColumn":34},{"ruleId":"163","severity":1,"message":"202","line":237,"column":15,"nodeType":"165","messageId":"166","endLine":237,"endColumn":26},{"ruleId":"163","severity":1,"message":"203","line":255,"column":15,"nodeType":"165","messageId":"166","endLine":255,"endColumn":23},{"ruleId":"163","severity":1,"message":"202","line":276,"column":15,"nodeType":"165","messageId":"166","endLine":276,"endColumn":26},{"ruleId":"163","severity":1,"message":"203","line":289,"column":15,"nodeType":"165","messageId":"166","endLine":289,"endColumn":23},{"ruleId":"183","severity":1,"message":"184","line":353,"column":32,"nodeType":"185","messageId":"186","endLine":353,"endColumn":34},{"ruleId":"163","severity":1,"message":"204","line":384,"column":18,"nodeType":"165","messageId":"166","endLine":384,"endColumn":38},{"ruleId":"163","severity":1,"message":"205","line":408,"column":13,"nodeType":"165","messageId":"166","endLine":408,"endColumn":28},{"ruleId":"163","severity":1,"message":"206","line":412,"column":13,"nodeType":"165","messageId":"166","endLine":412,"endColumn":28},{"ruleId":"183","severity":1,"message":"184","line":425,"column":32,"nodeType":"185","messageId":"186","endLine":425,"endColumn":34},{"ruleId":"163","severity":1,"message":"203","line":432,"column":15,"nodeType":"165","messageId":"166","endLine":432,"endColumn":23},{"ruleId":"163","severity":1,"message":"203","line":451,"column":15,"nodeType":"165","messageId":"166","endLine":451,"endColumn":23},{"ruleId":"163","severity":1,"message":"207","line":514,"column":13,"nodeType":"165","messageId":"166","endLine":514,"endColumn":26},{"ruleId":"163","severity":1,"message":"208","line":518,"column":13,"nodeType":"165","messageId":"166","endLine":518,"endColumn":27},{"ruleId":"183","severity":1,"message":"184","line":522,"column":32,"nodeType":"185","messageId":"186","endLine":522,"endColumn":34},{"ruleId":"163","severity":1,"message":"202","line":525,"column":15,"nodeType":"165","messageId":"166","endLine":525,"endColumn":26},{"ruleId":"163","severity":1,"message":"207","line":537,"column":15,"nodeType":"165","messageId":"166","endLine":537,"endColumn":28},{"ruleId":"163","severity":1,"message":"187","line":545,"column":15,"nodeType":"165","messageId":"166","endLine":545,"endColumn":26},{"ruleId":"163","severity":1,"message":"203","line":549,"column":15,"nodeType":"165","messageId":"166","endLine":549,"endColumn":23},{"ruleId":"163","severity":1,"message":"202","line":571,"column":15,"nodeType":"165","messageId":"166","endLine":571,"endColumn":26},{"ruleId":"163","severity":1,"message":"207","line":583,"column":15,"nodeType":"165","messageId":"166","endLine":583,"endColumn":28},{"ruleId":"163","severity":1,"message":"209","line":591,"column":15,"nodeType":"165","messageId":"166","endLine":591,"endColumn":26},{"ruleId":"163","severity":1,"message":"203","line":595,"column":15,"nodeType":"165","messageId":"166","endLine":595,"endColumn":23},{"ruleId":"163","severity":1,"message":"205","line":643,"column":13,"nodeType":"165","messageId":"166","endLine":643,"endColumn":28},{"ruleId":"163","severity":1,"message":"206","line":647,"column":13,"nodeType":"165","messageId":"166","endLine":647,"endColumn":28},{"ruleId":"183","severity":1,"message":"184","line":660,"column":32,"nodeType":"185","messageId":"186","endLine":660,"endColumn":34},{"ruleId":"163","severity":1,"message":"202","line":663,"column":15,"nodeType":"165","messageId":"166","endLine":663,"endColumn":26},{"ruleId":"163","severity":1,"message":"202","line":689,"column":15,"nodeType":"165","messageId":"166","endLine":689,"endColumn":26},{"ruleId":"183","severity":1,"message":"184","line":760,"column":32,"nodeType":"185","messageId":"186","endLine":760,"endColumn":34},{"ruleId":"163","severity":1,"message":"202","line":763,"column":15,"nodeType":"165","messageId":"166","endLine":763,"endColumn":26},{"ruleId":"163","severity":1,"message":"187","line":781,"column":15,"nodeType":"165","messageId":"166","endLine":781,"endColumn":26},{"ruleId":"163","severity":1,"message":"203","line":785,"column":15,"nodeType":"165","messageId":"166","endLine":785,"endColumn":23},{"ruleId":"163","severity":1,"message":"202","line":811,"column":15,"nodeType":"165","messageId":"166","endLine":811,"endColumn":26},{"ruleId":"163","severity":1,"message":"209","line":827,"column":15,"nodeType":"165","messageId":"166","endLine":827,"endColumn":26},{"ruleId":"163","severity":1,"message":"203","line":833,"column":15,"nodeType":"165","messageId":"166","endLine":833,"endColumn":23},{"ruleId":"163","severity":1,"message":"210","line":864,"column":18,"nodeType":"165","messageId":"166","endLine":864,"endColumn":38},{"ruleId":"183","severity":1,"message":"184","line":905,"column":32,"nodeType":"185","messageId":"186","endLine":905,"endColumn":34},{"ruleId":"211","severity":1,"message":"212","line":914,"column":54,"nodeType":"165","messageId":"213","endLine":914,"endColumn":69},{"ruleId":"163","severity":1,"message":"203","line":922,"column":15,"nodeType":"165","messageId":"166","endLine":922,"endColumn":23},{"ruleId":"211","severity":1,"message":"212","line":939,"column":54,"nodeType":"165","messageId":"213","endLine":939,"endColumn":69},{"ruleId":"163","severity":1,"message":"203","line":947,"column":15,"nodeType":"165","messageId":"166","endLine":947,"endColumn":23},{"ruleId":"163","severity":1,"message":"214","line":29,"column":10,"nodeType":"165","messageId":"166","endLine":29,"endColumn":20},{"ruleId":"163","severity":1,"message":"215","line":29,"column":22,"nodeType":"165","messageId":"166","endLine":29,"endColumn":35},{"ruleId":"163","severity":1,"message":"216","line":30,"column":10,"nodeType":"165","messageId":"166","endLine":30,"endColumn":22},{"ruleId":"163","severity":1,"message":"217","line":30,"column":24,"nodeType":"165","messageId":"166","endLine":30,"endColumn":40},{"ruleId":"163","severity":1,"message":"218","line":31,"column":10,"nodeType":"165","messageId":"166","endLine":31,"endColumn":18},{"ruleId":"163","severity":1,"message":"219","line":31,"column":20,"nodeType":"165","messageId":"166","endLine":31,"endColumn":31},{"ruleId":"163","severity":1,"message":"220","line":32,"column":10,"nodeType":"165","messageId":"166","endLine":32,"endColumn":20},{"ruleId":"163","severity":1,"message":"221","line":32,"column":22,"nodeType":"165","messageId":"166","endLine":32,"endColumn":35},{"ruleId":"163","severity":1,"message":"222","line":35,"column":10,"nodeType":"165","messageId":"166","endLine":35,"endColumn":21},{"ruleId":"163","severity":1,"message":"223","line":41,"column":10,"nodeType":"165","messageId":"166","endLine":41,"endColumn":16},{"ruleId":"163","severity":1,"message":"224","line":76,"column":18,"nodeType":"165","messageId":"166","endLine":76,"endColumn":31},{"ruleId":"163","severity":1,"message":"205","line":100,"column":13,"nodeType":"165","messageId":"166","endLine":100,"endColumn":28},{"ruleId":"163","severity":1,"message":"206","line":104,"column":13,"nodeType":"165","messageId":"166","endLine":104,"endColumn":28},{"ruleId":"183","severity":1,"message":"184","line":117,"column":32,"nodeType":"185","messageId":"186","endLine":117,"endColumn":34},{"ruleId":"163","severity":1,"message":"202","line":120,"column":15,"nodeType":"165","messageId":"166","endLine":120,"endColumn":26},{"ruleId":"163","severity":1,"message":"202","line":141,"column":15,"nodeType":"165","messageId":"166","endLine":141,"endColumn":26},{"ruleId":"183","severity":1,"message":"184","line":225,"column":32,"nodeType":"185","messageId":"186","endLine":225,"endColumn":34},{"ruleId":"163","severity":1,"message":"187","line":227,"column":15,"nodeType":"165","messageId":"166","endLine":227,"endColumn":26},{"ruleId":"163","severity":1,"message":"203","line":239,"column":15,"nodeType":"165","messageId":"166","endLine":239,"endColumn":23},{"ruleId":"163","severity":1,"message":"203","line":286,"column":15,"nodeType":"165","messageId":"166","endLine":286,"endColumn":23},{"ruleId":"163","severity":1,"message":"205","line":348,"column":13,"nodeType":"165","messageId":"166","endLine":348,"endColumn":28},{"ruleId":"163","severity":1,"message":"206","line":352,"column":13,"nodeType":"165","messageId":"166","endLine":352,"endColumn":28},{"ruleId":"183","severity":1,"message":"184","line":365,"column":32,"nodeType":"185","messageId":"186","endLine":365,"endColumn":34},{"ruleId":"163","severity":1,"message":"203","line":374,"column":15,"nodeType":"165","messageId":"166","endLine":374,"endColumn":23},{"ruleId":"163","severity":1,"message":"203","line":408,"column":15,"nodeType":"165","messageId":"166","endLine":408,"endColumn":23},{"ruleId":"183","severity":1,"message":"184","line":483,"column":32,"nodeType":"185","messageId":"186","endLine":483,"endColumn":34},{"ruleId":"163","severity":1,"message":"225","line":503,"column":15,"nodeType":"165","messageId":"166","endLine":503,"endColumn":33},{"ruleId":"163","severity":1,"message":"203","line":516,"column":15,"nodeType":"165","messageId":"166","endLine":516,"endColumn":23},{"ruleId":"163","severity":1,"message":"225","line":563,"column":15,"nodeType":"165","messageId":"166","endLine":563,"endColumn":33},{"ruleId":"163","severity":1,"message":"203","line":576,"column":15,"nodeType":"165","messageId":"166","endLine":576,"endColumn":23},{"ruleId":"163","severity":1,"message":"205","line":638,"column":13,"nodeType":"165","messageId":"166","endLine":638,"endColumn":28},{"ruleId":"163","severity":1,"message":"206","line":642,"column":13,"nodeType":"165","messageId":"166","endLine":642,"endColumn":28},{"ruleId":"183","severity":1,"message":"184","line":655,"column":32,"nodeType":"185","messageId":"186","endLine":655,"endColumn":34},{"ruleId":"211","severity":1,"message":"212","line":668,"column":54,"nodeType":"165","messageId":"213","endLine":668,"endColumn":69},{"ruleId":"163","severity":1,"message":"225","line":671,"column":15,"nodeType":"165","messageId":"166","endLine":671,"endColumn":33},{"ruleId":"211","severity":1,"message":"212","line":700,"column":54,"nodeType":"165","messageId":"213","endLine":700,"endColumn":69},{"ruleId":"163","severity":1,"message":"225","line":703,"column":15,"nodeType":"165","messageId":"166","endLine":703,"endColumn":33},{"ruleId":"172","severity":1,"message":"226","line":763,"column":15,"nodeType":"174","endLine":763,"endColumn":18},"no-unused-vars","'ethers' is assigned a value but never used.","Identifier","unusedVar","'Web3' is assigned a value but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Segment' is defined but never used.","'Breadcrumb' is defined but never used.","'centralbankid' is assigned a value but never used.","'setCentralBankID' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'bankAdded'. Either include it or remove the dependency array.","ArrayExpression",["227"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'responseEcb' is assigned a value but never used.","'use' is defined but never used.","'bankAdded' is assigned a value but never used.","'setBankAdded' is assigned a value but never used.","'temp' is assigned a value but never used.","'setTemp' is assigned a value but never used.","'Image' is defined but never used.","'bankid' is assigned a value but never used.","'setBankID' is assigned a value but never used.","'arrayDataBorrowDet' is assigned a value but never used.","'newarrayData' is assigned a value but never used.","'setNewArrayData' is assigned a value but never used.","'symbolbranch' is assigned a value but never used.","'setSymbolBranch' is assigned a value but never used.","'isApprovedButton' is assigned a value but never used.","'IDByAddress' is assigned a value but never used.","'response' is assigned a value but never used.","'sendForexRequestBank' is defined but never used.","'callContractECB' is assigned a value but never used.","'callContractFED' is assigned a value but never used.","'branchDetails' is assigned a value but never used.","'requestDetails' is assigned a value but never used.","'responseFed' is assigned a value but never used.","'approveBorrowRequest' is defined but never used.","no-use-before-define","'positionDetails' was used before it was defined.","usedBeforeDefined","'frombankid' is assigned a value but never used.","'setFromBankID' is assigned a value but never used.","'frombranchid' is assigned a value but never used.","'setFromBranchkID' is assigned a value but never used.","'tobankid' is assigned a value but never used.","'setToBankid' is assigned a value but never used.","'tobranchid' is assigned a value but never used.","'setToBranchid' is assigned a value but never used.","'tokensymbol' is assigned a value but never used.","'isExit' is assigned a value but never used.","'someForexDets' is defined but never used.","'calculateNumOfDays' is assigned a value but never used.","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md",{"desc":"228","fix":"229"},"Update the dependencies array to be: [arrayData, bankAdded]",{"range":"230","text":"231"},[1302,1313],"[arrayData, bankAdded]"]